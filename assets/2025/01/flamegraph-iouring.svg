<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="420" onload="init(evt)" viewBox="0 0 1200 420" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1317.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1317.00"> </text><svg id="frames" x="10" width="1180" total_samples="223229513838"><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (65,532,826 samples, 0.03%)</title><rect x="0.0077%" y="565" width="0.0294%" height="15" fill="rgb(227,0,7)" fg:x="17198477" fg:w="65532826"/><text x="0.2577%" y="575.50"></text></g><g><title>tokio_uring::runtime::Runtime::block_on::_{{closure}} (65,417,492 samples, 0.03%)</title><rect x="0.0078%" y="549" width="0.0293%" height="15" fill="rgb(217,0,24)" fg:x="17313811" fg:w="65417492"/><text x="0.2578%" y="559.50"></text></g><g><title>hovinen::process_file::_{{closure}}::_{{closure}}::_{{closure}} (65,417,492 samples, 0.03%)</title><rect x="0.0078%" y="533" width="0.0293%" height="15" fill="rgb(221,193,54)" fg:x="17313811" fg:w="65417492"/><text x="0.2578%" y="543.50"></text></g><g><title>hovinen::read_file::_{{closure}} (64,659,370 samples, 0.03%)</title><rect x="0.0081%" y="517" width="0.0290%" height="15" fill="rgb(248,212,6)" fg:x="18071933" fg:w="64659370"/><text x="0.2581%" y="527.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::spawn_local (32,818,726 samples, 0.01%)</title><rect x="0.0224%" y="501" width="0.0147%" height="15" fill="rgb(208,68,35)" fg:x="49912577" fg:w="32818726"/><text x="0.2724%" y="511.50"></text></g><g><title>_ZN7hovinen9read_file28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h76edfb9879f563b8E.llvm.3746805518481025899 (31,229,124 samples, 0.01%)</title><rect x="0.0459%" y="293" width="0.0140%" height="15" fill="rgb(232,128,0)" fg:x="102522085" fg:w="31229124"/><text x="0.2959%" y="303.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (45,115,311 samples, 0.02%)</title><rect x="0.0459%" y="325" width="0.0202%" height="15" fill="rgb(207,160,47)" fg:x="102522085" fg:w="45115311"/><text x="0.2959%" y="335.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (45,115,311 samples, 0.02%)</title><rect x="0.0459%" y="309" width="0.0202%" height="15" fill="rgb(228,23,34)" fg:x="102522085" fg:w="45115311"/><text x="0.2959%" y="319.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (54,477,620 samples, 0.02%)</title><rect x="0.0456%" y="341" width="0.0244%" height="15" fill="rgb(218,30,26)" fg:x="101877904" fg:w="54477620"/><text x="0.2956%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (59,177,364 samples, 0.03%)</title><rect x="0.0456%" y="437" width="0.0265%" height="15" fill="rgb(220,122,19)" fg:x="101877904" fg:w="59177364"/><text x="0.2956%" y="447.50"></text></g><g><title>std::panic::catch_unwind (59,177,364 samples, 0.03%)</title><rect x="0.0456%" y="421" width="0.0265%" height="15" fill="rgb(250,228,42)" fg:x="101877904" fg:w="59177364"/><text x="0.2956%" y="431.50"></text></g><g><title>std::panicking::try (59,177,364 samples, 0.03%)</title><rect x="0.0456%" y="405" width="0.0265%" height="15" fill="rgb(240,193,28)" fg:x="101877904" fg:w="59177364"/><text x="0.2956%" y="415.50"></text></g><g><title>std::panicking::try::do_call (59,177,364 samples, 0.03%)</title><rect x="0.0456%" y="389" width="0.0265%" height="15" fill="rgb(216,20,37)" fg:x="101877904" fg:w="59177364"/><text x="0.2956%" y="399.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (59,177,364 samples, 0.03%)</title><rect x="0.0456%" y="373" width="0.0265%" height="15" fill="rgb(206,188,39)" fg:x="101877904" fg:w="59177364"/><text x="0.2956%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (59,177,364 samples, 0.03%)</title><rect x="0.0456%" y="357" width="0.0265%" height="15" fill="rgb(217,207,13)" fg:x="101877904" fg:w="59177364"/><text x="0.2956%" y="367.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (71,064,403 samples, 0.03%)</title><rect x="0.0404%" y="469" width="0.0318%" height="15" fill="rgb(231,73,38)" fg:x="90256560" fg:w="71064403"/><text x="0.2904%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (62,877,930 samples, 0.03%)</title><rect x="0.0441%" y="453" width="0.0282%" height="15" fill="rgb(225,20,46)" fg:x="98443033" fg:w="62877930"/><text x="0.2941%" y="463.50"></text></g><g><title>tokio::runtime::coop::budget (74,577,158 samples, 0.03%)</title><rect x="0.0396%" y="549" width="0.0334%" height="15" fill="rgb(210,31,41)" fg:x="88501371" fg:w="74577158"/><text x="0.2896%" y="559.50"></text></g><g><title>tokio::runtime::coop::with_budget (74,577,158 samples, 0.03%)</title><rect x="0.0396%" y="533" width="0.0334%" height="15" fill="rgb(221,200,47)" fg:x="88501371" fg:w="74577158"/><text x="0.2896%" y="543.50"></text></g><g><title>tokio::task::local::LocalSet::tick::_{{closure}} (72,821,969 samples, 0.03%)</title><rect x="0.0404%" y="517" width="0.0326%" height="15" fill="rgb(226,26,5)" fg:x="90256560" fg:w="72821969"/><text x="0.2904%" y="527.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (72,821,969 samples, 0.03%)</title><rect x="0.0404%" y="501" width="0.0326%" height="15" fill="rgb(249,33,26)" fg:x="90256560" fg:w="72821969"/><text x="0.2904%" y="511.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (72,821,969 samples, 0.03%)</title><rect x="0.0404%" y="485" width="0.0326%" height="15" fill="rgb(235,183,28)" fg:x="90256560" fg:w="72821969"/><text x="0.2904%" y="495.50"></text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}} (148,378,665 samples, 0.07%)</title><rect x="0.0077%" y="581" width="0.0665%" height="15" fill="rgb(221,5,38)" fg:x="17137371" fg:w="148378665"/><text x="0.2577%" y="591.50"></text></g><g><title>tokio::task::local::LocalSet::tick (80,415,909 samples, 0.04%)</title><rect x="0.0381%" y="565" width="0.0360%" height="15" fill="rgb(247,18,42)" fg:x="85100127" fg:w="80415909"/><text x="0.2881%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (162,436,962 samples, 0.07%)</title><rect x="0.0025%" y="773" width="0.0728%" height="15" fill="rgb(241,131,45)" fg:x="5634460" fg:w="162436962"/><text x="0.2525%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}} (159,187,116 samples, 0.07%)</title><rect x="0.0040%" y="757" width="0.0713%" height="15" fill="rgb(249,31,29)" fg:x="8884306" fg:w="159187116"/><text x="0.2540%" y="767.50"></text></g><g><title>tokio::runtime::coop::budget (159,187,116 samples, 0.07%)</title><rect x="0.0040%" y="741" width="0.0713%" height="15" fill="rgb(225,111,53)" fg:x="8884306" fg:w="159187116"/><text x="0.2540%" y="751.50"></text></g><g><title>tokio::runtime::coop::with_budget (159,187,116 samples, 0.07%)</title><rect x="0.0040%" y="725" width="0.0713%" height="15" fill="rgb(238,160,17)" fg:x="8884306" fg:w="159187116"/><text x="0.2540%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}}::_{{closure}} (159,036,337 samples, 0.07%)</title><rect x="0.0040%" y="709" width="0.0712%" height="15" fill="rgb(214,148,48)" fg:x="9035085" fg:w="159036337"/><text x="0.2540%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (159,036,337 samples, 0.07%)</title><rect x="0.0040%" y="693" width="0.0712%" height="15" fill="rgb(232,36,49)" fg:x="9035085" fg:w="159036337"/><text x="0.2540%" y="703.50"></text></g><g><title>tokio::task::local::LocalSet::run_until::_{{closure}} (159,036,337 samples, 0.07%)</title><rect x="0.0040%" y="677" width="0.0712%" height="15" fill="rgb(209,103,24)" fg:x="9035085" fg:w="159036337"/><text x="0.2540%" y="687.50"></text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll (155,967,960 samples, 0.07%)</title><rect x="0.0054%" y="661" width="0.0699%" height="15" fill="rgb(229,88,8)" fg:x="12103462" fg:w="155967960"/><text x="0.2554%" y="671.50"></text></g><g><title>tokio::task::local::LocalSet::with (155,967,960 samples, 0.07%)</title><rect x="0.0054%" y="645" width="0.0699%" height="15" fill="rgb(213,181,19)" fg:x="12103462" fg:w="155967960"/><text x="0.2554%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (155,967,960 samples, 0.07%)</title><rect x="0.0054%" y="629" width="0.0699%" height="15" fill="rgb(254,191,54)" fg:x="12103462" fg:w="155967960"/><text x="0.2554%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (155,967,960 samples, 0.07%)</title><rect x="0.0054%" y="613" width="0.0699%" height="15" fill="rgb(241,83,37)" fg:x="12103462" fg:w="155967960"/><text x="0.2554%" y="623.50"></text></g><g><title>tokio::task::local::LocalSet::with::_{{closure}} (152,663,475 samples, 0.07%)</title><rect x="0.0069%" y="597" width="0.0684%" height="15" fill="rgb(233,36,39)" fg:x="15407947" fg:w="152663475"/><text x="0.2569%" y="607.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17haf6fab3019ed9c75E.llvm.7759108444496575687 (29,779,507 samples, 0.01%)</title><rect x="0.0832%" y="709" width="0.0133%" height="15" fill="rgb(226,3,54)" fg:x="185701338" fg:w="29779507"/><text x="0.3332%" y="719.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17h7ee3caeb2cc6fec1E.llvm.17991257707769106327 (44,449,095 samples, 0.02%)</title><rect x="0.0826%" y="725" width="0.0199%" height="15" fill="rgb(245,192,40)" fg:x="184348613" fg:w="44449095"/><text x="0.3326%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (61,550,051 samples, 0.03%)</title><rect x="0.0753%" y="773" width="0.0276%" height="15" fill="rgb(238,167,29)" fg:x="168071422" fg:w="61550051"/><text x="0.3253%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (61,387,112 samples, 0.03%)</title><rect x="0.0754%" y="757" width="0.0275%" height="15" fill="rgb(232,182,51)" fg:x="168234361" fg:w="61387112"/><text x="0.3254%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park::_{{closure}} (60,347,227 samples, 0.03%)</title><rect x="0.0758%" y="741" width="0.0270%" height="15" fill="rgb(231,60,39)" fg:x="169274246" fg:w="60347227"/><text x="0.3258%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (225,089,184 samples, 0.10%)</title><rect x="0.0021%" y="1205" width="0.1008%" height="15" fill="rgb(208,69,12)" fg:x="4647339" fg:w="225089184"/><text x="0.2521%" y="1215.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (225,089,184 samples, 0.10%)</title><rect x="0.0021%" y="1189" width="0.1008%" height="15" fill="rgb(235,93,37)" fg:x="4647339" fg:w="225089184"/><text x="0.2521%" y="1199.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (225,089,184 samples, 0.10%)</title><rect x="0.0021%" y="1173" width="0.1008%" height="15" fill="rgb(213,116,39)" fg:x="4647339" fg:w="225089184"/><text x="0.2521%" y="1183.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (225,089,184 samples, 0.10%)</title><rect x="0.0021%" y="1157" width="0.1008%" height="15" fill="rgb(222,207,29)" fg:x="4647339" fg:w="225089184"/><text x="0.2521%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1141" width="0.1006%" height="15" fill="rgb(206,96,30)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1151.50"></text></g><g><title>std::panicking::try (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1125" width="0.1006%" height="15" fill="rgb(218,138,4)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1135.50"></text></g><g><title>std::panicking::try::do_call (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1109" width="0.1006%" height="15" fill="rgb(250,191,14)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1119.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1093" width="0.1006%" height="15" fill="rgb(239,60,40)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1103.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1077" width="0.1006%" height="15" fill="rgb(206,27,48)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1087.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1061" width="0.1006%" height="15" fill="rgb(225,35,8)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1071.50"></text></g><g><title>hovinen::process_file::_{{closure}}::_{{closure}} (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1045" width="0.1006%" height="15" fill="rgb(250,213,24)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1055.50"></text></g><g><title>tokio_uring::start (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1029" width="0.1006%" height="15" fill="rgb(247,123,22)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1039.50"></text></g><g><title>tokio_uring::runtime::Runtime::block_on (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="1013" width="0.1006%" height="15" fill="rgb(231,138,38)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1023.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="997" width="0.1006%" height="15" fill="rgb(231,145,46)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="1007.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="981" width="0.1006%" height="15" fill="rgb(251,118,11)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="965" width="0.1006%" height="15" fill="rgb(217,147,25)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="975.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="949" width="0.1006%" height="15" fill="rgb(247,81,37)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on::_{{closure}} (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="933" width="0.1006%" height="15" fill="rgb(209,12,38)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="917" width="0.1006%" height="15" fill="rgb(227,1,9)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="901" width="0.1006%" height="15" fill="rgb(248,47,43)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="911.50"></text></g><g><title>tokio::runtime::context::set_scheduler (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="885" width="0.1006%" height="15" fill="rgb(221,10,30)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="869" width="0.1006%" height="15" fill="rgb(210,229,1)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="853" width="0.1006%" height="15" fill="rgb(222,148,37)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="863.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="837" width="0.1006%" height="15" fill="rgb(234,67,33)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="847.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="821" width="0.1006%" height="15" fill="rgb(247,98,35)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter::_{{closure}} (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="805" width="0.1006%" height="15" fill="rgb(247,138,52)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}} (224,616,686 samples, 0.10%)</title><rect x="0.0023%" y="789" width="0.1006%" height="15" fill="rgb(213,79,30)" fg:x="5119837" fg:w="224616686"/><text x="0.2523%" y="799.50"></text></g><g><title>__GI___clone3 (225,510,585 samples, 0.10%)</title><rect x="0.0020%" y="1253" width="0.1010%" height="15" fill="rgb(246,177,23)" fg:x="4521544" fg:w="225510585"/><text x="0.2520%" y="1263.50"></text></g><g><title>start_thread (225,510,585 samples, 0.10%)</title><rect x="0.0020%" y="1237" width="0.1010%" height="15" fill="rgb(230,62,27)" fg:x="4521544" fg:w="225510585"/><text x="0.2520%" y="1247.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (225,384,790 samples, 0.10%)</title><rect x="0.0021%" y="1221" width="0.1010%" height="15" fill="rgb(216,154,8)" fg:x="4647339" fg:w="225384790"/><text x="0.2521%" y="1231.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::join_all::_{{closure}} (22,999,398 samples, 0.01%)</title><rect x="0.1296%" y="789" width="0.0103%" height="15" fill="rgb(244,35,45)" fg:x="289220664" fg:w="22999398"/><text x="0.3796%" y="799.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}} (22,999,398 samples, 0.01%)</title><rect x="0.1296%" y="773" width="0.0103%" height="15" fill="rgb(251,115,12)" fg:x="289220664" fg:w="22999398"/><text x="0.3796%" y="783.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (22,999,398 samples, 0.01%)</title><rect x="0.1296%" y="757" width="0.0103%" height="15" fill="rgb(240,54,50)" fg:x="289220664" fg:w="22999398"/><text x="0.3796%" y="767.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::join_next::_{{closure}}::_{{closure}} (22,999,398 samples, 0.01%)</title><rect x="0.1296%" y="741" width="0.0103%" height="15" fill="rgb(233,84,52)" fg:x="289220664" fg:w="22999398"/><text x="0.3796%" y="751.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::poll_join_next (22,999,398 samples, 0.01%)</title><rect x="0.1296%" y="725" width="0.0103%" height="15" fill="rgb(207,117,47)" fg:x="289220664" fg:w="22999398"/><text x="0.3796%" y="735.50"></text></g><g><title>tokio::runtime::context::current::with_current (44,114,793 samples, 0.02%)</title><rect x="0.1412%" y="741" width="0.0198%" height="15" fill="rgb(249,43,39)" fg:x="315242853" fg:w="44114793"/><text x="0.3912%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (44,114,793 samples, 0.02%)</title><rect x="0.1412%" y="725" width="0.0198%" height="15" fill="rgb(209,38,44)" fg:x="315242853" fg:w="44114793"/><text x="0.3912%" y="735.50"></text></g><g><title>tokio::runtime::context::current::with_current::_{{closure}} (44,114,793 samples, 0.02%)</title><rect x="0.1412%" y="709" width="0.0198%" height="15" fill="rgb(236,212,23)" fg:x="315242853" fg:w="44114793"/><text x="0.3912%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (43,218,758 samples, 0.02%)</title><rect x="0.1416%" y="693" width="0.0194%" height="15" fill="rgb(242,79,21)" fg:x="316138888" fg:w="43218758"/><text x="0.3916%" y="703.50"></text></g><g><title>tokio::task::spawn::spawn_inner::_{{closure}} (39,096,263 samples, 0.02%)</title><rect x="0.1435%" y="677" width="0.0175%" height="15" fill="rgb(211,96,35)" fg:x="320261383" fg:w="39096263"/><text x="0.3935%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::Handle::spawn (39,096,263 samples, 0.02%)</title><rect x="0.1435%" y="661" width="0.0175%" height="15" fill="rgb(253,215,40)" fg:x="320261383" fg:w="39096263"/><text x="0.3935%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::spawn (39,096,263 samples, 0.02%)</title><rect x="0.1435%" y="645" width="0.0175%" height="15" fill="rgb(211,81,21)" fg:x="320261383" fg:w="39096263"/><text x="0.3935%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (39,096,263 samples, 0.02%)</title><rect x="0.1435%" y="629" width="0.0175%" height="15" fill="rgb(208,190,38)" fg:x="320261383" fg:w="39096263"/><text x="0.3935%" y="639.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1237" width="0.0589%" height="15" fill="rgb(235,213,38)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1247.50"></text></g><g><title>__libc_start_call_main (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1221" width="0.0589%" height="15" fill="rgb(237,122,38)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1231.50"></text></g><g><title>main (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1205" width="0.0589%" height="15" fill="rgb(244,218,35)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1215.50"></text></g><g><title>std::rt::lang_start_internal (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1189" width="0.0589%" height="15" fill="rgb(240,68,47)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1199.50"></text></g><g><title>std::panic::catch_unwind (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1173" width="0.0589%" height="15" fill="rgb(210,16,53)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1183.50"></text></g><g><title>std::panicking::try (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1157" width="0.0589%" height="15" fill="rgb(235,124,12)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1167.50"></text></g><g><title>std::panicking::try::do_call (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1141" width="0.0589%" height="15" fill="rgb(224,169,11)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1151.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1125" width="0.0589%" height="15" fill="rgb(250,166,2)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1135.50"></text></g><g><title>std::panic::catch_unwind (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1109" width="0.0589%" height="15" fill="rgb(242,216,29)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1119.50"></text></g><g><title>std::panicking::try (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1093" width="0.0589%" height="15" fill="rgb(230,116,27)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1103.50"></text></g><g><title>std::panicking::try::do_call (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1077" width="0.0589%" height="15" fill="rgb(228,99,48)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1087.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1061" width="0.0589%" height="15" fill="rgb(253,11,6)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1071.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h89fdeb2ed8992e57E.llvm.11884488631826144040 (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1045" width="0.0589%" height="15" fill="rgb(247,143,39)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1055.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1029" width="0.0589%" height="15" fill="rgb(236,97,10)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="1013" width="0.0589%" height="15" fill="rgb(233,208,19)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1023.50"></text></g><g><title>hovinen::main (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="997" width="0.0589%" height="15" fill="rgb(216,164,2)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="1007.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="981" width="0.0589%" height="15" fill="rgb(220,129,5)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="991.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="965" width="0.0589%" height="15" fill="rgb(242,17,10)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="949" width="0.0589%" height="15" fill="rgb(242,107,0)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="959.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="933" width="0.0589%" height="15" fill="rgb(251,28,31)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="917" width="0.0589%" height="15" fill="rgb(233,223,10)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="927.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="901" width="0.0589%" height="15" fill="rgb(215,21,27)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="911.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (131,373,063 samples, 0.06%)</title><rect x="0.1031%" y="885" width="0.0589%" height="15" fill="rgb(232,23,21)" fg:x="230120810" fg:w="131373063"/><text x="0.3531%" y="895.50"></text></g><g><title>tokio::runtime::coop::budget (116,846,360 samples, 0.05%)</title><rect x="0.1096%" y="869" width="0.0523%" height="15" fill="rgb(244,5,23)" fg:x="244647513" fg:w="116846360"/><text x="0.3596%" y="879.50"></text></g><g><title>tokio::runtime::coop::with_budget (116,846,360 samples, 0.05%)</title><rect x="0.1096%" y="853" width="0.0523%" height="15" fill="rgb(226,81,46)" fg:x="244647513" fg:w="116846360"/><text x="0.3596%" y="863.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (116,802,611 samples, 0.05%)</title><rect x="0.1096%" y="837" width="0.0523%" height="15" fill="rgb(247,70,30)" fg:x="244691262" fg:w="116802611"/><text x="0.3596%" y="847.50"></text></g><g><title>hovinen::main::_{{closure}} (116,802,611 samples, 0.05%)</title><rect x="0.1096%" y="821" width="0.0523%" height="15" fill="rgb(212,68,19)" fg:x="244691262" fg:w="116802611"/><text x="0.3596%" y="831.50"></text></g><g><title>hovinen::process_file::_{{closure}} (116,674,886 samples, 0.05%)</title><rect x="0.1097%" y="805" width="0.0523%" height="15" fill="rgb(240,187,13)" fg:x="244818987" fg:w="116674886"/><text x="0.3597%" y="815.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::spawn (49,273,811 samples, 0.02%)</title><rect x="0.1399%" y="789" width="0.0221%" height="15" fill="rgb(223,113,26)" fg:x="312220062" fg:w="49273811"/><text x="0.3899%" y="799.50"></text></g><g><title>tokio::task::spawn::spawn (46,629,042 samples, 0.02%)</title><rect x="0.1410%" y="773" width="0.0209%" height="15" fill="rgb(206,192,2)" fg:x="314864831" fg:w="46629042"/><text x="0.3910%" y="783.50"></text></g><g><title>tokio::task::spawn::spawn_inner (46,292,824 samples, 0.02%)</title><rect x="0.1412%" y="757" width="0.0207%" height="15" fill="rgb(241,108,4)" fg:x="315201049" fg:w="46292824"/><text x="0.3912%" y="767.50"></text></g><g><title>_start (132,428,684 samples, 0.06%)</title><rect x="0.1031%" y="1253" width="0.0593%" height="15" fill="rgb(247,173,49)" fg:x="230120809" fg:w="132428684"/><text x="0.3531%" y="1263.50"></text></g><g><title>hovinen (369,139,581 samples, 0.17%)</title><rect x="0.0000%" y="1269" width="0.1654%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="369139581"/><text x="0.2500%" y="1279.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (22,640,049 samples, 0.01%)</title><rect x="0.1825%" y="517" width="0.0101%" height="15" fill="rgb(245,159,27)" fg:x="407353521" fg:w="22640049"/><text x="0.4325%" y="527.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (22,640,049 samples, 0.01%)</title><rect x="0.1825%" y="501" width="0.0101%" height="15" fill="rgb(245,172,44)" fg:x="407353521" fg:w="22640049"/><text x="0.4325%" y="511.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (22,640,049 samples, 0.01%)</title><rect x="0.1825%" y="485" width="0.0101%" height="15" fill="rgb(236,23,11)" fg:x="407353521" fg:w="22640049"/><text x="0.4325%" y="495.50"></text></g><g><title>parking_lot_core::parking_lot::park (22,640,028 samples, 0.01%)</title><rect x="0.1825%" y="469" width="0.0101%" height="15" fill="rgb(205,117,38)" fg:x="407353542" fg:w="22640028"/><text x="0.4325%" y="479.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (22,640,028 samples, 0.01%)</title><rect x="0.1825%" y="453" width="0.0101%" height="15" fill="rgb(237,72,25)" fg:x="407353542" fg:w="22640028"/><text x="0.4325%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (22,718,078 samples, 0.01%)</title><rect x="0.1825%" y="533" width="0.0102%" height="15" fill="rgb(244,70,9)" fg:x="407315300" fg:w="22718078"/><text x="0.4325%" y="543.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (36,886,096 samples, 0.02%)</title><rect x="0.1780%" y="565" width="0.0165%" height="15" fill="rgb(217,125,39)" fg:x="397280370" fg:w="36886096"/><text x="0.4280%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (33,314,035 samples, 0.01%)</title><rect x="0.1796%" y="549" width="0.0149%" height="15" fill="rgb(235,36,10)" fg:x="400852431" fg:w="33314035"/><text x="0.4296%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (42,219,929 samples, 0.02%)</title><rect x="0.1756%" y="581" width="0.0189%" height="15" fill="rgb(251,123,47)" fg:x="392014195" fg:w="42219929"/><text x="0.4256%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (66,391,213 samples, 0.03%)</title><rect x="0.1749%" y="597" width="0.0297%" height="15" fill="rgb(221,13,13)" fg:x="390410664" fg:w="66391213"/><text x="0.4249%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43,069,629 samples, 0.02%)</title><rect x="0.2883%" y="213" width="0.0193%" height="15" fill="rgb(238,131,9)" fg:x="643519664" fg:w="43069629"/><text x="0.5383%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43,069,629 samples, 0.02%)</title><rect x="0.2883%" y="197" width="0.0193%" height="15" fill="rgb(211,50,8)" fg:x="643519664" fg:w="43069629"/><text x="0.5383%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (43,069,629 samples, 0.02%)</title><rect x="0.2883%" y="181" width="0.0193%" height="15" fill="rgb(245,182,24)" fg:x="643519664" fg:w="43069629"/><text x="0.5383%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (43,069,629 samples, 0.02%)</title><rect x="0.2883%" y="165" width="0.0193%" height="15" fill="rgb(242,14,37)" fg:x="643519664" fg:w="43069629"/><text x="0.5383%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37,205,609 samples, 0.02%)</title><rect x="0.2909%" y="149" width="0.0167%" height="15" fill="rgb(246,228,12)" fg:x="649383684" fg:w="37205609"/><text x="0.5409%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37,205,609 samples, 0.02%)</title><rect x="0.2909%" y="133" width="0.0167%" height="15" fill="rgb(213,55,15)" fg:x="649383684" fg:w="37205609"/><text x="0.5409%" y="143.50"></text></g><g><title>alloc::alloc::alloc (37,205,609 samples, 0.02%)</title><rect x="0.2909%" y="117" width="0.0167%" height="15" fill="rgb(209,9,3)" fg:x="649383684" fg:w="37205609"/><text x="0.5409%" y="127.50"></text></g><g><title>malloc (33,116,748 samples, 0.01%)</title><rect x="0.2927%" y="101" width="0.0148%" height="15" fill="rgb(230,59,30)" fg:x="653472545" fg:w="33116748"/><text x="0.5427%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (45,358,408 samples, 0.02%)</title><rect x="0.2883%" y="293" width="0.0203%" height="15" fill="rgb(209,121,21)" fg:x="643519664" fg:w="45358408"/><text x="0.5383%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (45,358,408 samples, 0.02%)</title><rect x="0.2883%" y="277" width="0.0203%" height="15" fill="rgb(220,109,13)" fg:x="643519664" fg:w="45358408"/><text x="0.5383%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45,358,408 samples, 0.02%)</title><rect x="0.2883%" y="261" width="0.0203%" height="15" fill="rgb(232,18,1)" fg:x="643519664" fg:w="45358408"/><text x="0.5383%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (45,358,408 samples, 0.02%)</title><rect x="0.2883%" y="245" width="0.0203%" height="15" fill="rgb(215,41,42)" fg:x="643519664" fg:w="45358408"/><text x="0.5383%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (45,358,408 samples, 0.02%)</title><rect x="0.2883%" y="229" width="0.0203%" height="15" fill="rgb(224,123,36)" fg:x="643519664" fg:w="45358408"/><text x="0.5383%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (44,989,498 samples, 0.02%)</title><rect x="0.8057%" y="245" width="0.0202%" height="15" fill="rgb(240,125,3)" fg:x="1798538586" fg:w="44989498"/><text x="1.0557%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (47,046,200 samples, 0.02%)</title><rect x="0.8057%" y="261" width="0.0211%" height="15" fill="rgb(205,98,50)" fg:x="1798538586" fg:w="47046200"/><text x="1.0557%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (11,037,534,950 samples, 4.94%)</title><rect x="2.1985%" y="229" width="4.9445%" height="15" fill="rgb(205,185,37)" fg:x="4907623851" fg:w="11037534950"/><text x="2.4485%" y="239.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (11,031,266,646 samples, 4.94%)</title><rect x="2.2013%" y="213" width="4.9417%" height="15" fill="rgb(238,207,15)" fg:x="4913892155" fg:w="11031266646"/><text x="2.4513%" y="223.50">core::..</text></g><g><title>hovinen::process_buffer::_{{closure}} (11,031,266,646 samples, 4.94%)</title><rect x="2.2013%" y="197" width="4.9417%" height="15" fill="rgb(213,199,42)" fg:x="4913892155" fg:w="11031266646"/><text x="2.4513%" y="207.50">hovine..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5,776,224,787 samples, 2.59%)</title><rect x="9.5330%" y="213" width="2.5876%" height="15" fill="rgb(235,201,11)" fg:x="21280397060" fg:w="5776224787"/><text x="9.7830%" y="223.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::find (26,370,193,178 samples, 11.81%)</title><rect x="0.3086%" y="293" width="11.8130%" height="15" fill="rgb(207,46,11)" fg:x="688878072" fg:w="26370193178"/><text x="0.5586%" y="303.50">core::iter::traits..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,350,613,380 samples, 11.80%)</title><rect x="0.3174%" y="277" width="11.8043%" height="15" fill="rgb(241,35,35)" fg:x="708457870" fg:w="26350613380"/><text x="0.5674%" y="287.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25,213,486,464 samples, 11.29%)</title><rect x="0.8268%" y="261" width="11.2949%" height="15" fill="rgb(243,32,47)" fg:x="1845584786" fg:w="25213486464"/><text x="1.0768%" y="271.50">&lt;core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (25,213,486,464 samples, 11.29%)</title><rect x="0.8268%" y="245" width="11.2949%" height="15" fill="rgb(247,202,23)" fg:x="1845584786" fg:w="25213486464"/><text x="1.0768%" y="255.50">core::iter::trait..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,113,912,449 samples, 4.98%)</title><rect x="7.1429%" y="229" width="4.9787%" height="15" fill="rgb(219,102,11)" fg:x="15945158801" fg:w="11113912449"/><text x="7.3929%" y="239.50">&lt;core:..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9,638,459,274 samples, 4.32%)</title><rect x="12.1246%" y="293" width="4.3177%" height="15" fill="rgb(243,110,44)" fg:x="27065747011" fg:w="9638459274"/><text x="12.3746%" y="303.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9,638,459,274 samples, 4.32%)</title><rect x="12.1246%" y="277" width="4.3177%" height="15" fill="rgb(222,74,54)" fg:x="27065747011" fg:w="9638459274"/><text x="12.3746%" y="287.50">&lt;core..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (9,495,847,736 samples, 4.25%)</title><rect x="12.1885%" y="261" width="4.2538%" height="15" fill="rgb(216,99,12)" fg:x="27208358549" fg:w="9495847736"/><text x="12.4385%" y="271.50">core:..</text></g><g><title>ahash::operations::folded_multiply (3,294,734,988 samples, 1.48%)</title><rect x="25.5102%" y="165" width="1.4759%" height="15" fill="rgb(226,22,26)" fg:x="56946387021" fg:w="3294734988"/><text x="25.7602%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (589,090,362 samples, 0.26%)</title><rect x="26.7223%" y="149" width="0.2639%" height="15" fill="rgb(217,163,10)" fg:x="59652031647" fg:w="589090362"/><text x="26.9723%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (4,704,489,506 samples, 2.11%)</title><rect x="25.5102%" y="181" width="2.1075%" height="15" fill="rgb(213,25,53)" fg:x="56946387021" fg:w="4704489506"/><text x="25.7602%" y="191.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,409,754,518 samples, 0.63%)</title><rect x="26.9862%" y="165" width="0.6315%" height="15" fill="rgb(252,105,26)" fg:x="60241122009" fg:w="1409754518"/><text x="27.2362%" y="175.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (400,643,880 samples, 0.18%)</title><rect x="27.6177%" y="181" width="0.1795%" height="15" fill="rgb(220,39,43)" fg:x="61650876527" fg:w="400643880"/><text x="27.8677%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (400,643,880 samples, 0.18%)</title><rect x="27.6177%" y="165" width="0.1795%" height="15" fill="rgb(229,68,48)" fg:x="61650876527" fg:w="400643880"/><text x="27.8677%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (673,086,865 samples, 0.30%)</title><rect x="28.2961%" y="101" width="0.3015%" height="15" fill="rgb(252,8,32)" fg:x="63165233414" fg:w="673086865"/><text x="28.5461%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (105,291,130 samples, 0.05%)</title><rect x="28.5504%" y="85" width="0.0472%" height="15" fill="rgb(223,20,43)" fg:x="63733029149" fg:w="105291130"/><text x="28.8004%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (276,891,232 samples, 0.12%)</title><rect x="28.5976%" y="101" width="0.1240%" height="15" fill="rgb(229,81,49)" fg:x="63838320279" fg:w="276891232"/><text x="28.8476%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1,999,512,160 samples, 0.90%)</title><rect x="27.9272%" y="117" width="0.8957%" height="15" fill="rgb(236,28,36)" fg:x="62341645199" fg:w="1999512160"/><text x="28.1772%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (225,945,848 samples, 0.10%)</title><rect x="28.7217%" y="101" width="0.1012%" height="15" fill="rgb(249,185,26)" fg:x="64115211511" fg:w="225945848"/><text x="28.9717%" y="111.50"></text></g><g><title>ahash::operations::read_small (135,440,485 samples, 0.06%)</title><rect x="28.8229%" y="117" width="0.0607%" height="15" fill="rgb(249,174,33)" fg:x="64341157359" fg:w="135440485"/><text x="29.0729%" y="127.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_last_u32 (81,828,773 samples, 0.04%)</title><rect x="28.8469%" y="101" width="0.0367%" height="15" fill="rgb(233,201,37)" fg:x="64394769071" fg:w="81828773"/><text x="29.0969%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (199,422,703 samples, 0.09%)</title><rect x="28.8835%" y="117" width="0.0893%" height="15" fill="rgb(221,78,26)" fg:x="64476597844" fg:w="199422703"/><text x="29.1335%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (3,487,956,770 samples, 1.56%)</title><rect x="27.7972%" y="133" width="1.5625%" height="15" fill="rgb(250,127,30)" fg:x="62051520407" fg:w="3487956770"/><text x="28.0472%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (863,456,630 samples, 0.39%)</title><rect x="28.9729%" y="117" width="0.3868%" height="15" fill="rgb(230,49,44)" fg:x="64676020547" fg:w="863456630"/><text x="29.2229%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12,952,110,462 samples, 5.80%)</title><rect x="24.7019%" y="197" width="5.8021%" height="15" fill="rgb(229,67,23)" fg:x="55141927654" fg:w="12952110462"/><text x="24.9519%" y="207.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,042,517,709 samples, 2.71%)</title><rect x="27.7972%" y="181" width="2.7069%" height="15" fill="rgb(249,83,47)" fg:x="62051520407" fg:w="6042517709"/><text x="28.0472%" y="191.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (6,042,517,709 samples, 2.71%)</title><rect x="27.7972%" y="165" width="2.7069%" height="15" fill="rgb(215,43,3)" fg:x="62051520407" fg:w="6042517709"/><text x="28.0472%" y="175.50">co..</text></g><g><title>core::hash::Hasher::write_str (6,042,517,709 samples, 2.71%)</title><rect x="27.7972%" y="149" width="2.7069%" height="15" fill="rgb(238,154,13)" fg:x="62051520407" fg:w="6042517709"/><text x="28.0472%" y="159.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (2,554,560,939 samples, 1.14%)</title><rect x="29.3597%" y="133" width="1.1444%" height="15" fill="rgb(219,56,2)" fg:x="65539477177" fg:w="2554560939"/><text x="29.6097%" y="143.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,554,560,939 samples, 1.14%)</title><rect x="29.3597%" y="117" width="1.1444%" height="15" fill="rgb(233,0,4)" fg:x="65539477177" fg:w="2554560939"/><text x="29.6097%" y="127.50"></text></g><g><title>ahash::operations::folded_multiply (2,001,580,430 samples, 0.90%)</title><rect x="29.6074%" y="101" width="0.8966%" height="15" fill="rgb(235,30,7)" fg:x="66092457686" fg:w="2001580430"/><text x="29.8574%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,997,636,167 samples, 0.89%)</title><rect x="29.6092%" y="85" width="0.8949%" height="15" fill="rgb(250,79,13)" fg:x="66096401949" fg:w="1997636167"/><text x="29.8592%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (12,966,734,112 samples, 5.81%)</title><rect x="24.6972%" y="213" width="5.8087%" height="15" fill="rgb(211,146,34)" fg:x="55131430019" fg:w="12966734112"/><text x="24.9472%" y="223.50">hashbro..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,380,253,201 samples, 2.41%)</title><rect x="31.3616%" y="165" width="2.4102%" height="15" fill="rgb(228,22,38)" fg:x="70008435472" fg:w="5380253201"/><text x="31.6116%" y="175.50">&lt;h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5,380,253,201 samples, 2.41%)</title><rect x="31.3616%" y="149" width="2.4102%" height="15" fill="rgb(235,168,5)" fg:x="70008435472" fg:w="5380253201"/><text x="31.6116%" y="159.50">ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (24,745,513 samples, 0.01%)</title><rect x="33.7607%" y="133" width="0.0111%" height="15" fill="rgb(221,155,16)" fg:x="75363943160" fg:w="24745513"/><text x="34.0107%" y="143.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (24,745,513 samples, 0.01%)</title><rect x="33.7607%" y="117" width="0.0111%" height="15" fill="rgb(215,215,53)" fg:x="75363943160" fg:w="24745513"/><text x="34.0107%" y="127.50"></text></g><g><title>__memcmp_avx2_movbe (21,718,113,856 samples, 9.73%)</title><rect x="41.0328%" y="37" width="9.7291%" height="15" fill="rgb(223,4,10)" fg:x="91597284913" fg:w="21718113856"/><text x="41.2828%" y="47.50">__memcmp_avx2_..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="149" width="16.8519%" height="15" fill="rgb(234,103,6)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="159.50">hashbrown::map::equivalent..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="133" width="16.8519%" height="15" fill="rgb(227,97,0)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="143.50">&lt;Q as hashbrown::Equivalen..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="117" width="16.8519%" height="15" fill="rgb(234,150,53)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="127.50">core::cmp::impls::&lt;impl co..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="101" width="16.8519%" height="15" fill="rgb(228,201,54)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="111.50">core::str::traits::&lt;impl c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="85" width="16.8519%" height="15" fill="rgb(222,22,37)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="95.50">core::cmp::impls::&lt;impl co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="69" width="16.8519%" height="15" fill="rgb(237,53,32)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="79.50">core::slice::cmp::&lt;impl co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (37,618,524,579 samples, 16.85%)</title><rect x="33.9185%" y="53" width="16.8519%" height="15" fill="rgb(233,25,53)" fg:x="75716175158" fg:w="37618524579"/><text x="34.1685%" y="63.50">&lt;[A] as core::slice::cmp::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (39,777,028,481 samples, 17.82%)</title><rect x="33.7757%" y="165" width="17.8189%" height="15" fill="rgb(210,40,34)" fg:x="75397250140" fg:w="39777028481"/><text x="34.0257%" y="175.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,839,578,884 samples, 0.82%)</title><rect x="50.7705%" y="149" width="0.8241%" height="15" fill="rgb(241,220,44)" fg:x="113334699737" fg:w="1839578884"/><text x="51.0205%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,839,578,884 samples, 0.82%)</title><rect x="50.7705%" y="133" width="0.8241%" height="15" fill="rgb(235,28,35)" fg:x="113334699737" fg:w="1839578884"/><text x="51.0205%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,839,578,884 samples, 0.82%)</title><rect x="50.7705%" y="117" width="0.8241%" height="15" fill="rgb(210,56,17)" fg:x="113334699737" fg:w="1839578884"/><text x="51.0205%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (49,049,423 samples, 0.02%)</title><rect x="51.5979%" y="165" width="0.0220%" height="15" fill="rgb(224,130,29)" fg:x="115181703552" fg:w="49049423"/><text x="51.8479%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (7,428,743,326 samples, 3.33%)</title><rect x="51.6199%" y="165" width="3.3278%" height="15" fill="rgb(235,212,8)" fg:x="115230752975" fg:w="7428743326"/><text x="51.8699%" y="175.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::load (395,993,288 samples, 0.18%)</title><rect x="54.9477%" y="165" width="0.1774%" height="15" fill="rgb(223,33,50)" fg:x="122659496301" fg:w="395993288"/><text x="55.1977%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (395,993,288 samples, 0.18%)</title><rect x="54.9477%" y="149" width="0.1774%" height="15" fill="rgb(219,149,13)" fg:x="122659496301" fg:w="395993288"/><text x="55.1977%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (395,993,288 samples, 0.18%)</title><rect x="54.9477%" y="133" width="0.1774%" height="15" fill="rgb(250,156,29)" fg:x="122659496301" fg:w="395993288"/><text x="55.1977%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7,587,657,702 samples, 3.40%)</title><rect x="55.1251%" y="165" width="3.3990%" height="15" fill="rgb(216,193,19)" fg:x="123055489589" fg:w="7587657702"/><text x="55.3751%" y="175.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7,587,657,702 samples, 3.40%)</title><rect x="55.1251%" y="149" width="3.3990%" height="15" fill="rgb(216,135,14)" fg:x="123055489589" fg:w="7587657702"/><text x="55.3751%" y="159.50">cor..</text></g><g><title>ahash::hash_map::AHashMap&lt;K,V,S&gt;::get_mut (76,656,845,574 samples, 34.34%)</title><rect x="24.6045%" y="277" width="34.3399%" height="15" fill="rgb(241,47,5)" fg:x="54924455949" fg:w="76656845574"/><text x="24.8545%" y="287.50">ahash::hash_map::AHashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (76,656,845,574 samples, 34.34%)</title><rect x="24.6045%" y="261" width="34.3399%" height="15" fill="rgb(233,42,35)" fg:x="54924455949" fg:w="76656845574"/><text x="24.8545%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (76,656,845,574 samples, 34.34%)</title><rect x="24.6045%" y="245" width="34.3399%" height="15" fill="rgb(231,13,6)" fg:x="54924455949" fg:w="76656845574"/><text x="24.8545%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (76,656,845,574 samples, 34.34%)</title><rect x="24.6045%" y="229" width="34.3399%" height="15" fill="rgb(207,181,40)" fg:x="54924455949" fg:w="76656845574"/><text x="24.8545%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (63,483,137,392 samples, 28.44%)</title><rect x="30.5059%" y="213" width="28.4385%" height="15" fill="rgb(254,173,49)" fg:x="68098164131" fg:w="63483137392"/><text x="30.7559%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::get_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (63,483,137,392 samples, 28.44%)</title><rect x="30.5059%" y="197" width="28.4385%" height="15" fill="rgb(221,1,38)" fg:x="68098164131" fg:w="63483137392"/><text x="30.7559%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (63,483,137,392 samples, 28.44%)</title><rect x="30.5059%" y="181" width="28.4385%" height="15" fill="rgb(206,124,46)" fg:x="68098164131" fg:w="63483137392"/><text x="30.7559%" y="191.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (938,154,232 samples, 0.42%)</title><rect x="58.5241%" y="165" width="0.4203%" height="15" fill="rgb(249,21,11)" fg:x="130643147291" fg:w="938154232"/><text x="58.7741%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (938,154,232 samples, 0.42%)</title><rect x="58.5241%" y="149" width="0.4203%" height="15" fill="rgb(222,201,40)" fg:x="130643147291" fg:w="938154232"/><text x="58.7741%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (938,154,232 samples, 0.42%)</title><rect x="58.5241%" y="133" width="0.4203%" height="15" fill="rgb(235,61,29)" fg:x="130643147291" fg:w="938154232"/><text x="58.7741%" y="143.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (1,234,830,994 samples, 0.55%)</title><rect x="58.9496%" y="277" width="0.5532%" height="15" fill="rgb(219,207,3)" fg:x="131592937694" fg:w="1234830994"/><text x="59.1996%" y="287.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (1,496,721,671 samples, 0.67%)</title><rect x="59.5028%" y="277" width="0.6705%" height="15" fill="rgb(222,56,46)" fg:x="132827768688" fg:w="1496721671"/><text x="59.7528%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold::enumerate::_{{closure}} (2,301,085,546 samples, 1.03%)</title><rect x="60.3183%" y="197" width="1.0308%" height="15" fill="rgb(239,76,54)" fg:x="134648319378" fg:w="2301085546"/><text x="60.5683%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2,301,085,546 samples, 1.03%)</title><rect x="60.3183%" y="181" width="1.0308%" height="15" fill="rgb(231,124,27)" fg:x="134648319378" fg:w="2301085546"/><text x="60.5683%" y="191.50"></text></g><g><title>hovinen::process_line::_{{closure}} (2,301,085,546 samples, 1.03%)</title><rect x="60.3183%" y="165" width="1.0308%" height="15" fill="rgb(249,195,6)" fg:x="134648319378" fg:w="2301085546"/><text x="60.5683%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5,283,875,153 samples, 2.37%)</title><rect x="60.2000%" y="245" width="2.3670%" height="15" fill="rgb(237,174,47)" fg:x="134384188725" fg:w="5283875153"/><text x="60.4500%" y="255.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold (5,283,875,153 samples, 2.37%)</title><rect x="60.2000%" y="229" width="2.3670%" height="15" fill="rgb(206,201,31)" fg:x="134384188725" fg:w="5283875153"/><text x="60.4500%" y="239.50">&lt;c..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (5,283,875,153 samples, 2.37%)</title><rect x="60.2000%" y="213" width="2.3670%" height="15" fill="rgb(231,57,52)" fg:x="134384188725" fg:w="5283875153"/><text x="60.4500%" y="223.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2,718,658,954 samples, 1.22%)</title><rect x="61.3491%" y="197" width="1.2179%" height="15" fill="rgb(248,177,22)" fg:x="136949404924" fg:w="2718658954"/><text x="61.5991%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,768,207,893 samples, 0.79%)</title><rect x="61.7749%" y="181" width="0.7921%" height="15" fill="rgb(215,211,37)" fg:x="137899855985" fg:w="1768207893"/><text x="62.0249%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (5,402,074,162 samples, 2.42%)</title><rect x="60.1733%" y="277" width="2.4200%" height="15" fill="rgb(241,128,51)" fg:x="134324490359" fg:w="5402074162"/><text x="60.4233%" y="287.50">co..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5,402,074,162 samples, 2.42%)</title><rect x="60.1733%" y="261" width="2.4200%" height="15" fill="rgb(227,165,31)" fg:x="134324490359" fg:w="5402074162"/><text x="60.4233%" y="271.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::is_none (58,500,643 samples, 0.03%)</title><rect x="62.5670%" y="245" width="0.0262%" height="15" fill="rgb(228,167,24)" fg:x="139668063878" fg:w="58500643"/><text x="62.8170%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (58,500,643 samples, 0.03%)</title><rect x="62.5670%" y="229" width="0.0262%" height="15" fill="rgb(228,143,12)" fg:x="139668063878" fg:w="58500643"/><text x="62.8170%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (560,862,820 samples, 0.25%)</title><rect x="62.5932%" y="261" width="0.2512%" height="15" fill="rgb(249,149,8)" fg:x="139726564521" fg:w="560862820"/><text x="62.8432%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (560,862,820 samples, 0.25%)</title><rect x="62.5932%" y="245" width="0.2512%" height="15" fill="rgb(243,35,44)" fg:x="139726564521" fg:w="560862820"/><text x="62.8432%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,081,589,245 samples, 2.28%)</title><rect x="62.5932%" y="277" width="2.2764%" height="15" fill="rgb(246,89,9)" fg:x="139726564521" fg:w="5081589245"/><text x="62.8432%" y="287.50">c..</text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,520,726,425 samples, 2.03%)</title><rect x="62.8445%" y="261" width="2.0251%" height="15" fill="rgb(233,213,13)" fg:x="140287427341" fg:w="4520726425"/><text x="63.0945%" y="271.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,520,726,425 samples, 2.03%)</title><rect x="62.8445%" y="245" width="2.0251%" height="15" fill="rgb(233,141,41)" fg:x="140287427341" fg:w="4520726425"/><text x="63.0945%" y="255.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (44,859,415 samples, 0.02%)</title><rect x="81.6979%" y="213" width="0.0201%" height="15" fill="rgb(239,167,4)" fg:x="182373720673" fg:w="44859415"/><text x="81.9479%" y="223.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (7,406,820,551 samples, 3.32%)</title><rect x="80.9093%" y="229" width="3.3180%" height="15" fill="rgb(209,217,16)" fg:x="180613455424" fg:w="7406820551"/><text x="81.1593%" y="239.50">cor..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (5,601,688,372 samples, 2.51%)</title><rect x="81.7180%" y="213" width="2.5094%" height="15" fill="rgb(219,88,35)" fg:x="182418587603" fg:w="5601688372"/><text x="81.9680%" y="223.50">co..</text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (1,555,890,334 samples, 0.70%)</title><rect x="94.8586%" y="165" width="0.6970%" height="15" fill="rgb(220,193,23)" fg:x="211752414386" fg:w="1555890334"/><text x="95.1086%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34,567,162 samples, 0.02%)</title><rect x="96.3629%" y="149" width="0.0155%" height="15" fill="rgb(230,90,52)" fg:x="215110436509" fg:w="34567162"/><text x="96.6129%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (2,333,249,676 samples, 1.05%)</title><rect x="95.5556%" y="165" width="1.0452%" height="15" fill="rgb(252,106,19)" fg:x="213308304720" fg:w="2333249676"/><text x="95.8056%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (496,550,725 samples, 0.22%)</title><rect x="96.3784%" y="149" width="0.2224%" height="15" fill="rgb(206,74,20)" fg:x="215145003671" fg:w="496550725"/><text x="96.6284%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (13,416,719,364 samples, 6.01%)</title><rect x="93.3878%" y="197" width="6.0103%" height="15" fill="rgb(230,138,44)" fg:x="208469118153" fg:w="13416719364"/><text x="93.6378%" y="207.50">core::nu..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (12,721,782,697 samples, 5.70%)</title><rect x="93.6991%" y="181" width="5.6990%" height="15" fill="rgb(235,182,43)" fg:x="209164054820" fg:w="12721782697"/><text x="93.9491%" y="191.50">&lt;[u8] a..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (6,244,283,121 samples, 2.80%)</title><rect x="96.6008%" y="165" width="2.7972%" height="15" fill="rgb(242,16,51)" fg:x="215641554396" fg:w="6244283121"/><text x="96.8508%" y="175.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (34,920,632,096 samples, 15.64%)</title><rect x="84.2273%" y="229" width="15.6434%" height="15" fill="rgb(248,9,4)" fg:x="188020275975" fg:w="34920632096"/><text x="84.4773%" y="239.50">core::num::dec2flt::pars..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (22,711,628,583 samples, 10.17%)</title><rect x="89.6966%" y="213" width="10.1741%" height="15" fill="rgb(210,31,22)" fg:x="200229279488" fg:w="22711628583"/><text x="89.9466%" y="223.50">core::num::dec2..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (1,055,070,554 samples, 0.47%)</title><rect x="99.3981%" y="197" width="0.4726%" height="15" fill="rgb(239,54,39)" fg:x="221885837517" fg:w="1055070554"/><text x="99.6481%" y="207.50"></text></g><g><title>hovinen::process_buffer (222,422,359,828 samples, 99.64%)</title><rect x="0.2354%" y="309" width="99.6384%" height="15" fill="rgb(230,99,41)" fg:x="525578544" fg:w="222422359828"/><text x="0.4854%" y="319.50">hovinen::process_buffer</text></g><g><title>hovinen::process_line (186,243,732,087 samples, 83.43%)</title><rect x="16.4424%" y="293" width="83.4315%" height="15" fill="rgb(253,106,12)" fg:x="36704206285" fg:w="186243732087"/><text x="16.6924%" y="303.50">hovinen::process_line</text></g><g><title>core::str::&lt;impl str&gt;::parse (78,139,784,606 samples, 35.00%)</title><rect x="64.8696%" y="277" width="35.0042%" height="15" fill="rgb(213,46,41)" fg:x="144808153766" fg:w="78139784606"/><text x="65.1196%" y="287.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (77,745,809,072 samples, 34.83%)</title><rect x="65.0461%" y="261" width="34.8277%" height="15" fill="rgb(215,133,35)" fg:x="145202129300" fg:w="77745809072"/><text x="65.2961%" y="271.50">core::num::dec2flt::&lt;impl core::str::traits::FromStr for ..</text></g><g><title>core::num::dec2flt::dec2flt (67,798,010,678 samples, 30.37%)</title><rect x="69.5024%" y="245" width="30.3714%" height="15" fill="rgb(213,28,5)" fg:x="155149927694" fg:w="67798010678"/><text x="69.7524%" y="255.50">core::num::dec2flt::dec2flt</text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (28,699,255 samples, 0.01%)</title><rect x="99.8846%" y="293" width="0.0129%" height="15" fill="rgb(215,77,49)" fg:x="222971933346" fg:w="28699255"/><text x="100.1346%" y="303.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (28,699,255 samples, 0.01%)</title><rect x="99.8846%" y="277" width="0.0129%" height="15" fill="rgb(248,100,22)" fg:x="222971933346" fg:w="28699255"/><text x="100.1346%" y="287.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (28,699,255 samples, 0.01%)</title><rect x="99.8846%" y="261" width="0.0129%" height="15" fill="rgb(208,67,9)" fg:x="222971933346" fg:w="28699255"/><text x="100.1346%" y="271.50"></text></g><g><title>_ZN7hovinen14processing_job28_$u7b$$u7b$closure$u7d$$u7d$17h552f10049f04849dE.llvm.3746805518481025899 (222,512,658,671 samples, 99.68%)</title><rect x="0.2282%" y="325" width="99.6789%" height="15" fill="rgb(219,133,21)" fg:x="509502039" fg:w="222512658671"/><text x="0.4782%" y="335.50">_ZN7hovinen14processing_job28_$u7b$$u7b$closure$u7d$$u7d$17h552f10049f04849dE.llvm.3746805518481025899</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (53,171,898 samples, 0.02%)</title><rect x="99.8833%" y="309" width="0.0238%" height="15" fill="rgb(246,46,29)" fg:x="222968988812" fg:w="53171898"/><text x="100.1333%" y="319.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (222,515,499,469 samples, 99.68%)</title><rect x="0.2282%" y="357" width="99.6801%" height="15" fill="rgb(246,185,52)" fg:x="509502039" fg:w="222515499469"/><text x="0.4782%" y="367.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (222,515,499,469 samples, 99.68%)</title><rect x="0.2282%" y="341" width="99.6801%" height="15" fill="rgb(252,136,11)" fg:x="509502039" fg:w="222515499469"/><text x="0.4782%" y="351.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (222,538,342,929 samples, 99.69%)</title><rect x="0.2282%" y="373" width="99.6904%" height="15" fill="rgb(219,138,53)" fg:x="509502039" fg:w="222538342929"/><text x="0.4782%" y="383.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::drop_future_or_output (22,843,460 samples, 0.01%)</title><rect x="99.9084%" y="357" width="0.0102%" height="15" fill="rgb(211,51,23)" fg:x="223025001508" fg:w="22843460"/><text x="100.1584%" y="367.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (22,843,460 samples, 0.01%)</title><rect x="99.9084%" y="341" width="0.0102%" height="15" fill="rgb(247,221,28)" fg:x="223025001508" fg:w="22843460"/><text x="100.1584%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (222,561,454,622 samples, 99.70%)</title><rect x="0.2282%" y="469" width="99.7007%" height="15" fill="rgb(251,222,45)" fg:x="509502039" fg:w="222561454622"/><text x="0.4782%" y="479.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (222,561,454,622 samples, 99.70%)</title><rect x="0.2282%" y="453" width="99.7007%" height="15" fill="rgb(217,162,53)" fg:x="509502039" fg:w="222561454622"/><text x="0.4782%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (222,561,454,622 samples, 99.70%)</title><rect x="0.2282%" y="437" width="99.7007%" height="15" fill="rgb(229,93,14)" fg:x="509502039" fg:w="222561454622"/><text x="0.4782%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (222,561,454,622 samples, 99.70%)</title><rect x="0.2282%" y="421" width="99.7007%" height="15" fill="rgb(209,67,49)" fg:x="509502039" fg:w="222561454622"/><text x="0.4782%" y="431.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (222,561,454,622 samples, 99.70%)</title><rect x="0.2282%" y="405" width="99.7007%" height="15" fill="rgb(213,87,29)" fg:x="509502039" fg:w="222561454622"/><text x="0.4782%" y="415.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (222,561,454,622 samples, 99.70%)</title><rect x="0.2282%" y="389" width="99.7007%" height="15" fill="rgb(205,151,52)" fg:x="509502039" fg:w="222561454622"/><text x="0.4782%" y="399.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::store_output (23,111,693 samples, 0.01%)</title><rect x="99.9186%" y="373" width="0.0104%" height="15" fill="rgb(253,215,39)" fg:x="223047844968" fg:w="23111693"/><text x="100.1686%" y="383.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (23,111,693 samples, 0.01%)</title><rect x="99.9186%" y="357" width="0.0104%" height="15" fill="rgb(221,220,41)" fg:x="223047844968" fg:w="23111693"/><text x="100.1686%" y="367.50"></text></g><g><title>tokio::runtime::coop::budget (222,614,270,980 samples, 99.72%)</title><rect x="0.2046%" y="581" width="99.7244%" height="15" fill="rgb(218,133,21)" fg:x="456818524" fg:w="222614270980"/><text x="0.4546%" y="591.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (222,614,270,980 samples, 99.72%)</title><rect x="0.2046%" y="565" width="99.7244%" height="15" fill="rgb(221,193,43)" fg:x="456818524" fg:w="222614270980"/><text x="0.4546%" y="575.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (222,612,089,767 samples, 99.72%)</title><rect x="0.2056%" y="549" width="99.7234%" height="15" fill="rgb(240,128,52)" fg:x="458999737" fg:w="222612089767"/><text x="0.4556%" y="559.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (222,603,395,795 samples, 99.72%)</title><rect x="0.2095%" y="533" width="99.7195%" height="15" fill="rgb(253,114,12)" fg:x="467693709" fg:w="222603395795"/><text x="0.4595%" y="543.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (222,603,395,795 samples, 99.72%)</title><rect x="0.2095%" y="517" width="99.7195%" height="15" fill="rgb(215,223,47)" fg:x="467693709" fg:w="222603395795"/><text x="0.4595%" y="527.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (222,584,061,416 samples, 99.71%)</title><rect x="0.2182%" y="501" width="99.7109%" height="15" fill="rgb(248,225,23)" fg:x="487028088" fg:w="222584061416"/><text x="0.4682%" y="511.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (222,564,605,576 samples, 99.70%)</title><rect x="0.2269%" y="485" width="99.7021%" height="15" fill="rgb(250,108,0)" fg:x="506483928" fg:w="222564605576"/><text x="0.4769%" y="495.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (222,632,095,105 samples, 99.73%)</title><rect x="0.2046%" y="597" width="99.7324%" height="15" fill="rgb(228,208,7)" fg:x="456801877" fg:w="222632095105"/><text x="0.4546%" y="607.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>__GI___clone3 (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1253" width="99.7827%" height="15" fill="rgb(244,45,10)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1263.50">__GI___clone3</text></g><g><title>start_thread (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1237" width="99.7827%" height="15" fill="rgb(207,125,25)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1247.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1221" width="99.7827%" height="15" fill="rgb(210,195,18)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1231.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1205" width="99.7827%" height="15" fill="rgb(249,80,12)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1215.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1189" width="99.7827%" height="15" fill="rgb(221,65,9)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1199.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1173" width="99.7827%" height="15" fill="rgb(235,49,36)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1183.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1157" width="99.7827%" height="15" fill="rgb(225,32,20)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1167.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1141" width="99.7827%" height="15" fill="rgb(215,141,46)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1151.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1125" width="99.7827%" height="15" fill="rgb(250,160,47)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1135.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1109" width="99.7827%" height="15" fill="rgb(216,222,40)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1119.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1093" width="99.7827%" height="15" fill="rgb(234,217,39)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1103.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1077" width="99.7827%" height="15" fill="rgb(207,178,40)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1087.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1061" width="99.7827%" height="15" fill="rgb(221,136,13)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1071.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1045" width="99.7827%" height="15" fill="rgb(249,199,10)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1055.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (222,744,352,175 samples, 99.78%)</title><rect x="0.1654%" y="1029" width="99.7827%" height="15" fill="rgb(249,222,13)" fg:x="369139581" fg:w="222744352175"/><text x="0.4154%" y="1039.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (222,744,275,642 samples, 99.78%)</title><rect x="0.1654%" y="1013" width="99.7826%" height="15" fill="rgb(244,185,38)" fg:x="369216114" fg:w="222744275642"/><text x="0.4154%" y="1023.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (222,744,275,642 samples, 99.78%)</title><rect x="0.1654%" y="997" width="99.7826%" height="15" fill="rgb(236,202,9)" fg:x="369216114" fg:w="222744275642"/><text x="0.4154%" y="1007.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (222,744,275,642 samples, 99.78%)</title><rect x="0.1654%" y="981" width="99.7826%" height="15" fill="rgb(250,229,37)" fg:x="369216114" fg:w="222744275642"/><text x="0.4154%" y="991.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (222,744,275,642 samples, 99.78%)</title><rect x="0.1654%" y="965" width="99.7826%" height="15" fill="rgb(206,174,23)" fg:x="369216114" fg:w="222744275642"/><text x="0.4154%" y="975.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="949" width="99.7826%" height="15" fill="rgb(211,33,43)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="959.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="933" width="99.7826%" height="15" fill="rgb(245,58,50)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="943.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="917" width="99.7826%" height="15" fill="rgb(244,68,36)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="901" width="99.7826%" height="15" fill="rgb(232,229,15)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="885" width="99.7826%" height="15" fill="rgb(254,30,23)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="869" width="99.7826%" height="15" fill="rgb(235,160,14)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="879.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="853" width="99.7826%" height="15" fill="rgb(212,155,44)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="863.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="837" width="99.7826%" height="15" fill="rgb(226,2,50)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="847.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="821" width="99.7826%" height="15" fill="rgb(234,177,6)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="831.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="805" width="99.7826%" height="15" fill="rgb(217,24,9)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="815.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="789" width="99.7826%" height="15" fill="rgb(220,13,46)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="799.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="773" width="99.7826%" height="15" fill="rgb(239,221,27)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="783.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (222,744,275,346 samples, 99.78%)</title><rect x="0.1654%" y="757" width="99.7826%" height="15" fill="rgb(222,198,25)" fg:x="369216410" fg:w="222744275346"/><text x="0.4154%" y="767.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (222,744,271,928 samples, 99.78%)</title><rect x="0.1654%" y="741" width="99.7826%" height="15" fill="rgb(211,99,13)" fg:x="369219828" fg:w="222744271928"/><text x="0.4154%" y="751.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="725" width="99.7826%" height="15" fill="rgb(232,111,31)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="735.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="709" width="99.7826%" height="15" fill="rgb(245,82,37)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="719.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="693" width="99.7826%" height="15" fill="rgb(227,149,46)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="703.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="677" width="99.7826%" height="15" fill="rgb(218,36,50)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="687.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="661" width="99.7826%" height="15" fill="rgb(226,80,48)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="671.50">tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="645" width="99.7826%" height="15" fill="rgb(238,224,15)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="655.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="629" width="99.7826%" height="15" fill="rgb(241,136,10)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="639.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (222,744,146,051 samples, 99.78%)</title><rect x="0.1655%" y="613" width="99.7826%" height="15" fill="rgb(208,32,45)" fg:x="369345705" fg:w="222744146051"/><text x="0.4155%" y="623.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>all (223,229,513,838 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="223229513838"/><text x="0.2500%" y="1295.50"></text></g><g><title>tokio-runtime-w (222,860,374,257 samples, 99.83%)</title><rect x="0.1654%" y="1269" width="99.8346%" height="15" fill="rgb(206,86,44)" fg:x="369139581" fg:w="222860374257"/><text x="0.4154%" y="1279.50">tokio-runtime-w</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (115,955,674 samples, 0.05%)</title><rect x="99.9481%" y="1253" width="0.0519%" height="15" fill="rgb(245,177,15)" fg:x="223113558164" fg:w="115955674"/><text x="100.1981%" y="1263.50"></text></g><g><title>core::num::dec2flt::dec2flt (115,955,674 samples, 0.05%)</title><rect x="99.9481%" y="1237" width="0.0519%" height="15" fill="rgb(206,64,50)" fg:x="223113558164" fg:w="115955674"/><text x="100.1981%" y="1247.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (115,955,674 samples, 0.05%)</title><rect x="99.9481%" y="1221" width="0.0519%" height="15" fill="rgb(234,36,40)" fg:x="223113558164" fg:w="115955674"/><text x="100.1981%" y="1231.50"></text></g></svg></svg>
