<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="420" onload="init(evt)" viewBox="0 0 1200 420" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="693702644747"><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2,177,857,897 samples, 0.31%)</title><rect x="1.4465%" y="357" width="0.3139%" height="15" fill="rgb(227,0,7)" fg:x="10034126152" fg:w="2177857897"/><text x="1.6965%" y="367.50"></text></g><g><title>alloc::string::String::new (1,462,074,280 samples, 0.21%)</title><rect x="3.1183%" y="341" width="0.2108%" height="15" fill="rgb(217,0,24)" fg:x="21631559988" fg:w="1462074280"/><text x="3.3683%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (5,689,590,844 samples, 0.82%)</title><rect x="3.3290%" y="341" width="0.8202%" height="15" fill="rgb(221,193,54)" fg:x="23093634268" fg:w="5689590844"/><text x="3.5790%" y="351.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (5,689,590,844 samples, 0.82%)</title><rect x="3.3290%" y="325" width="0.8202%" height="15" fill="rgb(248,212,6)" fg:x="23093634268" fg:w="5689590844"/><text x="3.5790%" y="335.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (5,689,590,844 samples, 0.82%)</title><rect x="3.3290%" y="309" width="0.8202%" height="15" fill="rgb(208,68,35)" fg:x="23093634268" fg:w="5689590844"/><text x="3.5790%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (5,689,590,844 samples, 0.82%)</title><rect x="3.3290%" y="293" width="0.8202%" height="15" fill="rgb(232,128,0)" fg:x="23093634268" fg:w="5689590844"/><text x="3.5790%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (98,286,446 samples, 0.01%)</title><rect x="4.1350%" y="277" width="0.0142%" height="15" fill="rgb(207,160,47)" fg:x="28684938666" fg:w="98286446"/><text x="4.3850%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (98,286,446 samples, 0.01%)</title><rect x="4.1350%" y="261" width="0.0142%" height="15" fill="rgb(228,23,34)" fg:x="28684938666" fg:w="98286446"/><text x="4.3850%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (98,286,446 samples, 0.01%)</title><rect x="4.1350%" y="245" width="0.0142%" height="15" fill="rgb(218,30,26)" fg:x="28684938666" fg:w="98286446"/><text x="4.3850%" y="255.50"></text></g><g><title>alloc::string::String::len (1,699,174,073 samples, 0.24%)</title><rect x="4.7077%" y="309" width="0.2449%" height="15" fill="rgb(220,122,19)" fg:x="32657181918" fg:w="1699174073"/><text x="4.9577%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,699,174,073 samples, 0.24%)</title><rect x="4.7077%" y="293" width="0.2449%" height="15" fill="rgb(250,228,42)" fg:x="32657181918" fg:w="1699174073"/><text x="4.9577%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (7,635,370,683 samples, 1.10%)</title><rect x="4.9567%" y="309" width="1.1007%" height="15" fill="rgb(240,193,28)" fg:x="34385014695" fg:w="7635370683"/><text x="5.2067%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (7,635,370,683 samples, 1.10%)</title><rect x="4.9567%" y="293" width="1.1007%" height="15" fill="rgb(216,20,37)" fg:x="34385014695" fg:w="7635370683"/><text x="5.2067%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1,076,888,088 samples, 0.16%)</title><rect x="6.0574%" y="309" width="0.1552%" height="15" fill="rgb(206,188,39)" fg:x="42020385378" fg:w="1076888088"/><text x="6.3074%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,076,888,088 samples, 0.16%)</title><rect x="6.0574%" y="293" width="0.1552%" height="15" fill="rgb(217,207,13)" fg:x="42020385378" fg:w="1076888088"/><text x="6.3074%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,076,888,088 samples, 0.16%)</title><rect x="6.0574%" y="277" width="0.1552%" height="15" fill="rgb(231,73,38)" fg:x="42020385378" fg:w="1076888088"/><text x="6.3074%" y="287.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (417,648,592 samples, 0.06%)</title><rect x="6.1524%" y="261" width="0.0602%" height="15" fill="rgb(225,20,46)" fg:x="42679624874" fg:w="417648592"/><text x="6.4024%" y="271.50"></text></g><g><title>core::slice::index::get_noubcheck (417,648,592 samples, 0.06%)</title><rect x="6.1524%" y="245" width="0.0602%" height="15" fill="rgb(210,31,41)" fg:x="42679624874" fg:w="417648592"/><text x="6.4024%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (138,167,013 samples, 0.02%)</title><rect x="13.1491%" y="277" width="0.0199%" height="15" fill="rgb(221,200,47)" fg:x="91215873116" fg:w="138167013"/><text x="13.3991%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (48,575,855,509 samples, 7.00%)</title><rect x="6.2126%" y="309" width="7.0024%" height="15" fill="rgb(226,26,5)" fg:x="43097273466" fg:w="48575855509"/><text x="6.4626%" y="319.50">core::str..</text></g><g><title>core::str::validations::run_utf8_validation (26,691,588,973 samples, 3.85%)</title><rect x="9.3673%" y="293" width="3.8477%" height="15" fill="rgb(249,33,26)" fg:x="64981540002" fg:w="26691588973"/><text x="9.6173%" y="303.50">core..</text></g><g><title>core::str::validations::utf8_char_width (319,088,846 samples, 0.05%)</title><rect x="13.1690%" y="277" width="0.0460%" height="15" fill="rgb(235,183,28)" fg:x="91354040129" fg:w="319088846"/><text x="13.4190%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1,064,481,835 samples, 0.15%)</title><rect x="13.3708%" y="277" width="0.1534%" height="15" fill="rgb(221,5,38)" fg:x="92753929879" fg:w="1064481835"/><text x="13.6208%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1,064,481,835 samples, 0.15%)</title><rect x="13.3708%" y="261" width="0.1534%" height="15" fill="rgb(247,18,42)" fg:x="92753929879" fg:w="1064481835"/><text x="13.6208%" y="271.50"></text></g><g><title>core::cmp::min (700,170,082 samples, 0.10%)</title><rect x="13.4234%" y="245" width="0.1009%" height="15" fill="rgb(241,131,45)" fg:x="93118241632" fg:w="700170082"/><text x="13.6734%" y="255.50"></text></g><g><title>core::cmp::Ord::min (700,170,082 samples, 0.10%)</title><rect x="13.4234%" y="229" width="0.1009%" height="15" fill="rgb(249,31,29)" fg:x="93118241632" fg:w="700170082"/><text x="13.6734%" y="239.50"></text></g><g><title>core::cmp::min_by (700,170,082 samples, 0.10%)</title><rect x="13.4234%" y="213" width="0.1009%" height="15" fill="rgb(225,111,53)" fg:x="93118241632" fg:w="700170082"/><text x="13.6734%" y="223.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (1,501,949,518 samples, 0.22%)</title><rect x="13.5667%" y="245" width="0.2165%" height="15" fill="rgb(238,160,17)" fg:x="94112828396" fg:w="1501949518"/><text x="13.8167%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1,224,012,358 samples, 0.18%)</title><rect x="13.7833%" y="229" width="0.1764%" height="15" fill="rgb(214,148,48)" fg:x="95614777914" fg:w="1224012358"/><text x="14.0333%" y="239.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1,203,503,884 samples, 0.17%)</title><rect x="13.7862%" y="213" width="0.1735%" height="15" fill="rgb(232,36,49)" fg:x="95635286388" fg:w="1203503884"/><text x="14.0362%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (1,203,503,884 samples, 0.17%)</title><rect x="13.7862%" y="197" width="0.1735%" height="15" fill="rgb(209,103,24)" fg:x="95635286388" fg:w="1203503884"/><text x="14.0362%" y="207.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (1,203,503,884 samples, 0.17%)</title><rect x="13.7862%" y="181" width="0.1735%" height="15" fill="rgb(229,88,8)" fg:x="95635286388" fg:w="1203503884"/><text x="14.0362%" y="191.50"></text></g><g><title>read (1,203,503,884 samples, 0.17%)</title><rect x="13.7862%" y="165" width="0.1735%" height="15" fill="rgb(213,181,19)" fg:x="95635286388" fg:w="1203503884"/><text x="14.0362%" y="175.50"></text></g><g><title>[unknown] (1,203,503,884 samples, 0.17%)</title><rect x="13.7862%" y="149" width="0.1735%" height="15" fill="rgb(254,191,54)" fg:x="95635286388" fg:w="1203503884"/><text x="14.0362%" y="159.50"></text></g><g><title>[unknown] (1,015,323,927 samples, 0.15%)</title><rect x="13.8133%" y="133" width="0.1464%" height="15" fill="rgb(241,83,37)" fg:x="95823466345" fg:w="1015323927"/><text x="14.0633%" y="143.50"></text></g><g><title>[unknown] (913,022,607 samples, 0.13%)</title><rect x="13.8281%" y="117" width="0.1316%" height="15" fill="rgb(233,36,39)" fg:x="95925767665" fg:w="913022607"/><text x="14.0781%" y="127.50"></text></g><g><title>[unknown] (872,104,483 samples, 0.13%)</title><rect x="13.8340%" y="101" width="0.1257%" height="15" fill="rgb(226,3,54)" fg:x="95966685789" fg:w="872104483"/><text x="14.0840%" y="111.50"></text></g><g><title>[unknown] (655,002,555 samples, 0.09%)</title><rect x="13.8653%" y="85" width="0.0944%" height="15" fill="rgb(245,192,40)" fg:x="96183787717" fg:w="655002555"/><text x="14.1153%" y="95.50"></text></g><g><title>[unknown] (397,120,460 samples, 0.06%)</title><rect x="13.9025%" y="69" width="0.0572%" height="15" fill="rgb(238,167,29)" fg:x="96441669812" fg:w="397120460"/><text x="14.1525%" y="79.50"></text></g><g><title>[unknown] (290,606,975 samples, 0.04%)</title><rect x="13.9178%" y="53" width="0.0419%" height="15" fill="rgb(232,182,51)" fg:x="96548183297" fg:w="290606975"/><text x="14.1678%" y="63.50"></text></g><g><title>[unknown] (110,525,994 samples, 0.02%)</title><rect x="13.9438%" y="37" width="0.0159%" height="15" fill="rgb(231,60,39)" fg:x="96728264278" fg:w="110525994"/><text x="14.1938%" y="47.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3,024,479,280 samples, 0.44%)</title><rect x="13.5243%" y="277" width="0.4360%" height="15" fill="rgb(208,69,12)" fg:x="93818411714" fg:w="3024479280"/><text x="13.7743%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3,024,479,280 samples, 0.44%)</title><rect x="13.5243%" y="261" width="0.4360%" height="15" fill="rgb(235,93,37)" fg:x="93818411714" fg:w="3024479280"/><text x="13.7743%" y="271.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1,228,113,080 samples, 0.18%)</title><rect x="13.7833%" y="245" width="0.1770%" height="15" fill="rgb(213,116,39)" fg:x="95614777914" fg:w="1228113080"/><text x="14.0333%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (974,352,936 samples, 0.14%)</title><rect x="14.0777%" y="229" width="0.1405%" height="15" fill="rgb(222,207,29)" fg:x="97657251866" fg:w="974352936"/><text x="14.3277%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (110,511,898 samples, 0.02%)</title><rect x="14.3585%" y="165" width="0.0159%" height="15" fill="rgb(206,96,30)" fg:x="99605100399" fg:w="110511898"/><text x="14.6085%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (2,882,354,206 samples, 0.42%)</title><rect x="14.3585%" y="181" width="0.4155%" height="15" fill="rgb(218,138,4)" fg:x="99605100399" fg:w="2882354206"/><text x="14.6085%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2,771,842,308 samples, 0.40%)</title><rect x="14.3744%" y="165" width="0.3996%" height="15" fill="rgb(250,191,14)" fg:x="99715612297" fg:w="2771842308"/><text x="14.6244%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,658,573,498 samples, 0.38%)</title><rect x="15.5786%" y="149" width="0.3832%" height="15" fill="rgb(239,60,40)" fg:x="108069121103" fg:w="2658573498"/><text x="15.8286%" y="159.50"></text></g><g><title>__rdl_alloc (1,093,114,561 samples, 0.16%)</title><rect x="17.5517%" y="133" width="0.1576%" height="15" fill="rgb(206,27,48)" fg:x="121756623028" fg:w="1093114561"/><text x="17.8017%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (151,568,829 samples, 0.02%)</title><rect x="17.6874%" y="117" width="0.0218%" height="15" fill="rgb(225,35,8)" fg:x="122698168760" fg:w="151568829"/><text x="17.9374%" y="127.50"></text></g><g><title>__rust_alloc (2,115,525,480 samples, 0.30%)</title><rect x="17.7093%" y="133" width="0.3050%" height="15" fill="rgb(250,213,24)" fg:x="122849737589" fg:w="2115525480"/><text x="17.9593%" y="143.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h52ac0451bcb89ab5E.llvm.7889216818227074814 (37,453,999,771 samples, 5.40%)</title><rect x="15.9618%" y="149" width="5.3991%" height="15" fill="rgb(247,123,22)" fg:x="110727694601" fg:w="37453999771"/><text x="16.2118%" y="159.50">_ZN5all..</text></g><g><title>malloc (23,200,133,080 samples, 3.34%)</title><rect x="18.0166%" y="133" width="3.3444%" height="15" fill="rgb(231,138,38)" fg:x="124981561292" fg:w="23200133080"/><text x="18.2666%" y="143.50">mal..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (106,453,261 samples, 0.02%)</title><rect x="21.3616%" y="149" width="0.0153%" height="15" fill="rgb(231,145,46)" fg:x="148185772433" fg:w="106453261"/><text x="21.6116%" y="159.50"></text></g><g><title>alloc::raw_vec::layout_array (7,189,119,444 samples, 1.04%)</title><rect x="21.3769%" y="149" width="1.0363%" height="15" fill="rgb(251,118,11)" fg:x="148292225694" fg:w="7189119444"/><text x="21.6269%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::repeat (7,189,119,444 samples, 1.04%)</title><rect x="21.3769%" y="133" width="1.0363%" height="15" fill="rgb(217,147,25)" fg:x="148292225694" fg:w="7189119444"/><text x="21.6269%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (1,121,881,049 samples, 0.16%)</title><rect x="22.2515%" y="117" width="0.1617%" height="15" fill="rgb(247,81,37)" fg:x="154359464089" fg:w="1121881049"/><text x="22.5015%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (1,121,881,049 samples, 0.16%)</title><rect x="22.2515%" y="101" width="0.1617%" height="15" fill="rgb(209,12,38)" fg:x="154359464089" fg:w="1121881049"/><text x="22.5015%" y="111.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (1,158,972,784 samples, 0.17%)</title><rect x="22.4133%" y="149" width="0.1671%" height="15" fill="rgb(227,1,9)" fg:x="155481345138" fg:w="1158972784"/><text x="22.6633%" y="159.50"></text></g><g><title>core::cmp::max (2,748,817,888 samples, 0.40%)</title><rect x="22.5803%" y="149" width="0.3963%" height="15" fill="rgb(248,47,43)" fg:x="156640317922" fg:w="2748817888"/><text x="22.8303%" y="159.50"></text></g><g><title>core::cmp::Ord::max (2,748,817,888 samples, 0.40%)</title><rect x="22.5803%" y="133" width="0.3963%" height="15" fill="rgb(221,10,30)" fg:x="156640317922" fg:w="2748817888"/><text x="22.8303%" y="143.50"></text></g><g><title>core::cmp::max_by (2,748,817,888 samples, 0.40%)</title><rect x="22.5803%" y="117" width="0.3963%" height="15" fill="rgb(210,229,1)" fg:x="156640317922" fg:w="2748817888"/><text x="22.8303%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (60,839,413,779 samples, 8.77%)</title><rect x="14.2181%" y="229" width="8.7702%" height="15" fill="rgb(222,148,37)" fg:x="98631604802" fg:w="60839413779"/><text x="14.4681%" y="239.50">alloc::vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (60,839,413,779 samples, 8.77%)</title><rect x="14.2181%" y="213" width="8.7702%" height="15" fill="rgb(234,67,33)" fg:x="98631604802" fg:w="60839413779"/><text x="14.4681%" y="223.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (60,839,413,779 samples, 8.77%)</title><rect x="14.2181%" y="197" width="8.7702%" height="15" fill="rgb(247,98,35)" fg:x="98631604802" fg:w="60839413779"/><text x="14.4681%" y="207.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (56,983,563,976 samples, 8.21%)</title><rect x="14.7740%" y="181" width="8.2144%" height="15" fill="rgb(247,138,52)" fg:x="102487454605" fg:w="56983563976"/><text x="15.0240%" y="191.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (56,983,563,976 samples, 8.21%)</title><rect x="14.7740%" y="165" width="8.2144%" height="15" fill="rgb(213,79,30)" fg:x="102487454605" fg:w="56983563976"/><text x="15.0240%" y="175.50">alloc::raw_..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (81,882,771 samples, 0.01%)</title><rect x="22.9766%" y="149" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="159389135810" fg:w="81882771"/><text x="23.2266%" y="159.50"></text></g><g><title>__memmove_avx_unaligned (2,227,309,972 samples, 0.32%)</title><rect x="22.9884%" y="213" width="0.3211%" height="15" fill="rgb(230,62,27)" fg:x="159471018581" fg:w="2227309972"/><text x="23.2384%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,372,906,071 samples, 1.06%)</title><rect x="22.9884%" y="229" width="1.0628%" height="15" fill="rgb(216,154,8)" fg:x="159471018581" fg:w="7372906071"/><text x="23.2384%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (5,145,596,099 samples, 0.74%)</title><rect x="23.3095%" y="213" width="0.7418%" height="15" fill="rgb(244,35,45)" fg:x="161698328553" fg:w="5145596099"/><text x="23.5595%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (78,783,157,687 samples, 11.36%)</title><rect x="13.9603%" y="277" width="11.3569%" height="15" fill="rgb(251,115,12)" fg:x="96842890994" fg:w="78783157687"/><text x="14.2103%" y="287.50">alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (78,783,157,687 samples, 11.36%)</title><rect x="13.9603%" y="261" width="11.3569%" height="15" fill="rgb(240,54,50)" fg:x="96842890994" fg:w="78783157687"/><text x="14.2103%" y="271.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (78,783,157,687 samples, 11.36%)</title><rect x="13.9603%" y="245" width="11.3569%" height="15" fill="rgb(233,84,52)" fg:x="96842890994" fg:w="78783157687"/><text x="14.2103%" y="255.50">alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8,782,124,029 samples, 1.27%)</title><rect x="24.0512%" y="229" width="1.2660%" height="15" fill="rgb(207,117,47)" fg:x="166843924652" fg:w="8782124029"/><text x="24.3012%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (1,572,505,219 samples, 0.23%)</title><rect x="31.7654%" y="245" width="0.2267%" height="15" fill="rgb(249,43,39)" fg:x="220357134172" fg:w="1572505219"/><text x="32.0154%" y="255.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (286,463,745 samples, 0.04%)</title><rect x="31.9920%" y="245" width="0.0413%" height="15" fill="rgb(209,38,44)" fg:x="221929639391" fg:w="286463745"/><text x="32.2420%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (72,944,927,550 samples, 10.52%)</title><rect x="25.5073%" y="261" width="10.5153%" height="15" fill="rgb(236,212,23)" fg:x="176944830412" fg:w="72944927550"/><text x="25.7573%" y="271.50">core::slice::me..</text></g><g><title>core::slice::memchr::memchr_naive (27,673,654,826 samples, 3.99%)</title><rect x="32.0333%" y="245" width="3.9893%" height="15" fill="rgb(242,79,21)" fg:x="222216103136" fg:w="27673654826"/><text x="32.2833%" y="255.50">core..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (237,743,317,796 samples, 34.27%)</title><rect x="1.7604%" y="357" width="34.2716%" height="15" fill="rgb(211,96,35)" fg:x="12211984049" fg:w="237743317796"/><text x="2.0104%" y="367.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iter..</text></g><g><title>std::io::BufRead::read_line (221,172,076,733 samples, 31.88%)</title><rect x="4.1492%" y="341" width="31.8828%" height="15" fill="rgb(253,215,40)" fg:x="28783225112" fg:w="221172076733"/><text x="4.3992%" y="351.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (221,172,076,733 samples, 31.88%)</title><rect x="4.1492%" y="325" width="31.8828%" height="15" fill="rgb(211,81,21)" fg:x="28783225112" fg:w="221172076733"/><text x="4.3992%" y="335.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (158,282,172,870 samples, 22.82%)</title><rect x="13.2150%" y="309" width="22.8170%" height="15" fill="rgb(208,190,38)" fg:x="91673128975" fg:w="158282172870"/><text x="13.4650%" y="319.50">std::io::BufRead::read_line::_{{clos..</text></g><g><title>std::io::read_until (158,282,172,870 samples, 22.82%)</title><rect x="13.2150%" y="293" width="22.8170%" height="15" fill="rgb(235,213,38)" fg:x="91673128975" fg:w="158282172870"/><text x="13.4650%" y="303.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (74,267,820,859 samples, 10.71%)</title><rect x="25.3261%" y="277" width="10.7060%" height="15" fill="rgb(237,122,38)" fg:x="175687480986" fg:w="74267820859"/><text x="25.5761%" y="287.50">core::slice::mem..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (245,693,202,420 samples, 35.42%)</title><rect x="0.6150%" y="373" width="35.4177%" height="15" fill="rgb(244,218,35)" fg:x="4266228561" fg:w="245693202420"/><text x="0.8650%" y="383.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::it..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (965,981,302 samples, 0.14%)</title><rect x="53.3172%" y="309" width="0.1393%" height="15" fill="rgb(240,68,47)" fg:x="369862925108" fg:w="965981302"/><text x="53.5672%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (965,981,302 samples, 0.14%)</title><rect x="53.3172%" y="293" width="0.1393%" height="15" fill="rgb(210,16,53)" fg:x="369862925108" fg:w="965981302"/><text x="53.5672%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (965,981,302 samples, 0.14%)</title><rect x="53.3172%" y="277" width="0.1393%" height="15" fill="rgb(235,124,12)" fg:x="369862925108" fg:w="965981302"/><text x="53.5672%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (118,663,147 samples, 0.02%)</title><rect x="53.4394%" y="261" width="0.0171%" height="15" fill="rgb(224,169,11)" fg:x="370710243263" fg:w="118663147"/><text x="53.6894%" y="271.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (4,977,482,430 samples, 0.72%)</title><rect x="53.4565%" y="309" width="0.7175%" height="15" fill="rgb(250,166,2)" fg:x="370828906410" fg:w="4977482430"/><text x="53.7065%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,586,471,531 samples, 0.23%)</title><rect x="54.4454%" y="277" width="0.2287%" height="15" fill="rgb(242,216,29)" fg:x="377689085471" fg:w="1586471531"/><text x="54.6954%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,586,471,531 samples, 0.23%)</title><rect x="54.4454%" y="261" width="0.2287%" height="15" fill="rgb(230,116,27)" fg:x="377689085471" fg:w="1586471531"/><text x="54.6954%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,382,085,453 samples, 0.63%)</title><rect x="54.1817%" y="309" width="0.6317%" height="15" fill="rgb(228,99,48)" fg:x="375859744373" fg:w="4382085453"/><text x="54.4317%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,382,085,453 samples, 0.63%)</title><rect x="54.1817%" y="293" width="0.6317%" height="15" fill="rgb(253,11,6)" fg:x="375859744373" fg:w="4382085453"/><text x="54.4317%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (966,272,824 samples, 0.14%)</title><rect x="54.6741%" y="277" width="0.1393%" height="15" fill="rgb(247,143,39)" fg:x="379275557002" fg:w="966272824"/><text x="54.9241%" y="287.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (115,455,443,942 samples, 16.64%)</title><rect x="38.4356%" y="341" width="16.6434%" height="15" fill="rgb(236,97,10)" fg:x="266629083039" fg:w="115455443942"/><text x="38.6856%" y="351.50">&lt;core::str::pattern::StrSe..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (108,047,756,336 samples, 15.58%)</title><rect x="39.5035%" y="325" width="15.5755%" height="15" fill="rgb(233,208,19)" fg:x="274036770645" fg:w="108047756336"/><text x="39.7535%" y="335.50">core::str::pattern::TwoW..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,842,697,155 samples, 0.27%)</title><rect x="54.8134%" y="309" width="0.2656%" height="15" fill="rgb(216,164,2)" fg:x="380241829826" fg:w="1842697155"/><text x="55.0634%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,842,697,155 samples, 0.27%)</title><rect x="54.8134%" y="293" width="0.2656%" height="15" fill="rgb(220,129,5)" fg:x="380241829826" fg:w="1842697155"/><text x="55.0634%" y="303.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (133,947,678,845 samples, 19.31%)</title><rect x="36.0326%" y="373" width="19.3091%" height="15" fill="rgb(242,17,10)" fg:x="249959430981" fg:w="133947678845"/><text x="36.2826%" y="383.50">&lt;core::str::iter::Split&lt;P&gt; as ..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (133,914,886,702 samples, 19.30%)</title><rect x="36.0374%" y="357" width="19.3044%" height="15" fill="rgb(242,107,0)" fg:x="249992223124" fg:w="133914886702"/><text x="36.2874%" y="367.50">core::str::iter::SplitInternal..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,777,492,577 samples, 0.26%)</title><rect x="55.0855%" y="341" width="0.2562%" height="15" fill="rgb(251,28,31)" fg:x="382129617249" fg:w="1777492577"/><text x="55.3355%" y="351.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (85,810,334 samples, 0.01%)</title><rect x="55.3512%" y="373" width="0.0124%" height="15" fill="rgb(233,223,10)" fg:x="383972679484" fg:w="85810334"/><text x="55.6012%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (5,318,057,278 samples, 0.77%)</title><rect x="55.3636%" y="373" width="0.7666%" height="15" fill="rgb(215,21,27)" fg:x="384058489818" fg:w="5318057278"/><text x="55.6136%" y="383.50"></text></g><g><title>__rdl_dealloc (1,208,314,366 samples, 0.17%)</title><rect x="56.1520%" y="261" width="0.1742%" height="15" fill="rgb(232,23,21)" fg:x="389527990078" fg:w="1208314366"/><text x="56.4020%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (216,861,378 samples, 0.03%)</title><rect x="56.2949%" y="245" width="0.0313%" height="15" fill="rgb(244,5,23)" fg:x="390519443066" fg:w="216861378"/><text x="56.5449%" y="255.50"></text></g><g><title>__rust_dealloc (916,780,221 samples, 0.13%)</title><rect x="56.3262%" y="261" width="0.1322%" height="15" fill="rgb(226,81,46)" fg:x="390736304444" fg:w="916780221"/><text x="56.5762%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14,272,260,152 samples, 2.06%)</title><rect x="56.1302%" y="293" width="2.0574%" height="15" fill="rgb(247,70,30)" fg:x="389376547096" fg:w="14272260152"/><text x="56.3802%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (14,272,260,152 samples, 2.06%)</title><rect x="56.1302%" y="277" width="2.0574%" height="15" fill="rgb(212,68,19)" fg:x="389376547096" fg:w="14272260152"/><text x="56.3802%" y="287.50">a..</text></g><g><title>cfree@GLIBC_2.2.5 (11,995,722,583 samples, 1.73%)</title><rect x="56.4584%" y="261" width="1.7292%" height="15" fill="rgb(240,187,13)" fg:x="391653084665" fg:w="11995722583"/><text x="56.7084%" y="271.50"></text></g><g><title>_int_free (7,368,489,566 samples, 1.06%)</title><rect x="57.1254%" y="245" width="1.0622%" height="15" fill="rgb(223,113,26)" fg:x="396280317682" fg:w="7368489566"/><text x="57.3754%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (15,263,057,765 samples, 2.20%)</title><rect x="56.1302%" y="373" width="2.2002%" height="15" fill="rgb(206,192,2)" fg:x="389376547096" fg:w="15263057765"/><text x="56.3802%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15,263,057,765 samples, 2.20%)</title><rect x="56.1302%" y="357" width="2.2002%" height="15" fill="rgb(241,108,4)" fg:x="389376547096" fg:w="15263057765"/><text x="56.3802%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15,263,057,765 samples, 2.20%)</title><rect x="56.1302%" y="341" width="2.2002%" height="15" fill="rgb(247,173,49)" fg:x="389376547096" fg:w="15263057765"/><text x="56.3802%" y="351.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,263,057,765 samples, 2.20%)</title><rect x="56.1302%" y="325" width="2.2002%" height="15" fill="rgb(224,114,35)" fg:x="389376547096" fg:w="15263057765"/><text x="56.3802%" y="335.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,263,057,765 samples, 2.20%)</title><rect x="56.1302%" y="309" width="2.2002%" height="15" fill="rgb(245,159,27)" fg:x="389376547096" fg:w="15263057765"/><text x="56.3802%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (990,797,613 samples, 0.14%)</title><rect x="58.1876%" y="293" width="0.1428%" height="15" fill="rgb(245,172,44)" fg:x="403648807248" fg:w="990797613"/><text x="58.4376%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (4,309,750,546 samples, 0.62%)</title><rect x="58.3304%" y="373" width="0.6213%" height="15" fill="rgb(236,23,11)" fg:x="404639604861" fg:w="4309750546"/><text x="58.5804%" y="383.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (7,298,277,892 samples, 1.05%)</title><rect x="63.8756%" y="325" width="1.0521%" height="15" fill="rgb(205,117,38)" fg:x="443106768302" fg:w="7298277892"/><text x="64.1256%" y="335.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (5,983,941,786 samples, 0.86%)</title><rect x="64.0651%" y="309" width="0.8626%" height="15" fill="rgb(237,72,25)" fg:x="444421104408" fg:w="5983941786"/><text x="64.3151%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (225,218,044 samples, 0.03%)</title><rect x="67.9541%" y="261" width="0.0325%" height="15" fill="rgb(244,70,9)" fg:x="471399345692" fg:w="225218044"/><text x="68.2041%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (2,677,627,611 samples, 0.39%)</title><rect x="67.9866%" y="261" width="0.3860%" height="15" fill="rgb(217,125,39)" fg:x="471624563736" fg:w="2677627611"/><text x="68.2366%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (876,200,022 samples, 0.13%)</title><rect x="68.2462%" y="245" width="0.1263%" height="15" fill="rgb(235,36,10)" fg:x="473425991325" fg:w="876200022"/><text x="68.4962%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (14,690,516,951 samples, 2.12%)</title><rect x="67.6472%" y="293" width="2.1177%" height="15" fill="rgb(251,123,47)" fg:x="469270353192" fg:w="14690516951"/><text x="67.8972%" y="303.50">c..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (13,822,372,027 samples, 1.99%)</title><rect x="67.7723%" y="277" width="1.9925%" height="15" fill="rgb(221,13,13)" fg:x="470138498116" fg:w="13822372027"/><text x="68.0223%" y="287.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (9,658,678,796 samples, 1.39%)</title><rect x="68.3726%" y="261" width="1.3923%" height="15" fill="rgb(238,131,9)" fg:x="474302191347" fg:w="9658678796"/><text x="68.6226%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (75,158,912,304 samples, 10.83%)</title><rect x="58.9517%" y="373" width="10.8345%" height="15" fill="rgb(211,50,8)" fg:x="408949355407" fg:w="75158912304"/><text x="59.2017%" y="383.50">core::str::&lt;impl..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (75,150,704,050 samples, 10.83%)</title><rect x="58.9529%" y="357" width="10.8333%" height="15" fill="rgb(245,182,24)" fg:x="408957563661" fg:w="75150704050"/><text x="59.2029%" y="367.50">core::num::dec2f..</text></g><g><title>core::num::dec2flt::dec2flt (66,181,946,596 samples, 9.54%)</title><rect x="60.2457%" y="341" width="9.5404%" height="15" fill="rgb(242,14,37)" fg:x="417926321115" fg:w="66181946596"/><text x="60.4957%" y="351.50">core::num::dec..</text></g><g><title>core::num::dec2flt::parse::parse_number (33,703,221,517 samples, 4.86%)</title><rect x="64.9277%" y="325" width="4.8585%" height="15" fill="rgb(246,228,12)" fg:x="450405046194" fg:w="33703221517"/><text x="65.1777%" y="335.50">core::..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (19,819,143,372 samples, 2.86%)</title><rect x="66.9291%" y="309" width="2.8570%" height="15" fill="rgb(213,55,15)" fg:x="464289124339" fg:w="19819143372"/><text x="67.1791%" y="319.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (147,397,568 samples, 0.02%)</title><rect x="69.7649%" y="293" width="0.0212%" height="15" fill="rgb(209,9,3)" fg:x="483960870143" fg:w="147397568"/><text x="70.0149%" y="303.50"></text></g><g><title>core::cmp::max (1,043,465,334 samples, 0.15%)</title><rect x="76.2437%" y="309" width="0.1504%" height="15" fill="rgb(230,59,30)" fg:x="528904457515" fg:w="1043465334"/><text x="76.4937%" y="319.50"></text></g><g><title>core::cmp::Ord::max (1,043,465,334 samples, 0.15%)</title><rect x="76.2437%" y="293" width="0.1504%" height="15" fill="rgb(209,121,21)" fg:x="528904457515" fg:w="1043465334"/><text x="76.4937%" y="303.50"></text></g><g><title>core::cmp::max_by (1,043,465,334 samples, 0.15%)</title><rect x="76.2437%" y="277" width="0.1504%" height="15" fill="rgb(220,109,13)" fg:x="528904457515" fg:w="1043465334"/><text x="76.4937%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (3,513,378,758 samples, 0.51%)</title><rect x="76.3941%" y="309" width="0.5065%" height="15" fill="rgb(232,18,1)" fg:x="529947922849" fg:w="3513378758"/><text x="76.6441%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,513,378,758 samples, 0.51%)</title><rect x="76.3941%" y="293" width="0.5065%" height="15" fill="rgb(215,41,42)" fg:x="529947922849" fg:w="3513378758"/><text x="76.6441%" y="303.50"></text></g><g><title>__memcmp_avx2_movbe (2,518,731,676 samples, 0.36%)</title><rect x="76.5375%" y="277" width="0.3631%" height="15" fill="rgb(224,123,36)" fg:x="530942569931" fg:w="2518731676"/><text x="76.7875%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,007,165,412 samples, 0.15%)</title><rect x="76.9006%" y="293" width="0.1452%" height="15" fill="rgb(240,125,3)" fg:x="533461301607" fg:w="1007165412"/><text x="77.1506%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,058,794,475 samples, 0.30%)</title><rect x="76.9006%" y="309" width="0.2968%" height="15" fill="rgb(205,98,50)" fg:x="533461301607" fg:w="2058794475"/><text x="77.1506%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,051,629,063 samples, 0.15%)</title><rect x="77.0458%" y="293" width="0.1516%" height="15" fill="rgb(205,185,37)" fg:x="534468467019" fg:w="1051629063"/><text x="77.2958%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,051,629,063 samples, 0.15%)</title><rect x="77.0458%" y="277" width="0.1516%" height="15" fill="rgb(238,207,15)" fg:x="534468467019" fg:w="1051629063"/><text x="77.2958%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (229,348,984 samples, 0.03%)</title><rect x="77.8736%" y="277" width="0.0331%" height="15" fill="rgb(213,199,42)" fg:x="540211268738" fg:w="229348984"/><text x="78.1236%" y="287.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (8,328,640,331 samples, 1.20%)</title><rect x="77.1974%" y="309" width="1.2006%" height="15" fill="rgb(235,201,11)" fg:x="535520096082" fg:w="8328640331"/><text x="77.4474%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,328,640,331 samples, 1.20%)</title><rect x="77.1974%" y="293" width="1.2006%" height="15" fill="rgb(207,46,11)" fg:x="535520096082" fg:w="8328640331"/><text x="77.4474%" y="303.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create::_{{closure}} (3,408,118,691 samples, 0.49%)</title><rect x="77.9067%" y="277" width="0.4913%" height="15" fill="rgb(241,35,35)" fg:x="540440617722" fg:w="3408118691"/><text x="78.1567%" y="287.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (37,873,475,107 samples, 5.46%)</title><rect x="73.3076%" y="357" width="5.4596%" height="15" fill="rgb(243,32,47)" fg:x="508536644162" fg:w="37873475107"/><text x="73.5576%" y="367.50">&lt;&amp;str a..</text></g><g><title>core::str::pattern::StrSearcher::new (36,832,896,975 samples, 5.31%)</title><rect x="73.4576%" y="341" width="5.3096%" height="15" fill="rgb(247,202,23)" fg:x="509577222294" fg:w="36832896975"/><text x="73.7076%" y="351.50">core::..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (23,077,073,558 samples, 3.33%)</title><rect x="75.4405%" y="325" width="3.3267%" height="15" fill="rgb(219,102,11)" fg:x="523333045711" fg:w="23077073558"/><text x="75.6905%" y="335.50">cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (2,536,793,447 samples, 0.37%)</title><rect x="78.4015%" y="309" width="0.3657%" height="15" fill="rgb(243,110,44)" fg:x="543873325822" fg:w="2536793447"/><text x="78.6515%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (62,310,071,966 samples, 8.98%)</title><rect x="69.7861%" y="373" width="8.9822%" height="15" fill="rgb(222,74,54)" fg:x="484108267711" fg:w="62310071966"/><text x="70.0361%" y="383.50">core::str::&lt;i..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,111,500,753 samples, 0.30%)</title><rect x="81.3025%" y="229" width="0.3044%" height="15" fill="rgb(216,99,12)" fg:x="563997725657" fg:w="2111500753"/><text x="81.5525%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,536,165,360 samples, 0.65%)</title><rect x="81.0009%" y="245" width="0.6539%" height="15" fill="rgb(226,22,26)" fg:x="561905045943" fg:w="4536165360"/><text x="81.2509%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (331,984,893 samples, 0.05%)</title><rect x="81.6069%" y="229" width="0.0479%" height="15" fill="rgb(217,163,10)" fg:x="566109226410" fg:w="331984893"/><text x="81.8569%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,511,706,977 samples, 1.23%)</title><rect x="82.0989%" y="229" width="1.2270%" height="15" fill="rgb(213,25,53)" fg:x="569522520900" fg:w="8511706977"/><text x="82.3489%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (32,990,223,554 samples, 4.76%)</title><rect x="79.2582%" y="293" width="4.7557%" height="15" fill="rgb(252,105,26)" fg:x="549816087222" fg:w="32990223554"/><text x="79.5082%" y="303.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (32,990,223,554 samples, 4.76%)</title><rect x="79.2582%" y="277" width="4.7557%" height="15" fill="rgb(220,39,43)" fg:x="549816087222" fg:w="32990223554"/><text x="79.5082%" y="287.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (32,990,223,554 samples, 4.76%)</title><rect x="79.2582%" y="261" width="4.7557%" height="15" fill="rgb(229,68,48)" fg:x="549816087222" fg:w="32990223554"/><text x="79.5082%" y="271.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16,365,099,473 samples, 2.36%)</title><rect x="81.6548%" y="245" width="2.3591%" height="15" fill="rgb(252,8,32)" fg:x="566441211303" fg:w="16365099473"/><text x="81.9048%" y="255.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,772,082,899 samples, 0.69%)</title><rect x="83.3259%" y="229" width="0.6879%" height="15" fill="rgb(223,20,43)" fg:x="578034227877" fg:w="4772082899"/><text x="83.5759%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,187,303,573 samples, 0.17%)</title><rect x="84.0139%" y="293" width="0.1712%" height="15" fill="rgb(229,81,49)" fg:x="582806310776" fg:w="1187303573"/><text x="84.2639%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (216,941,538 samples, 0.03%)</title><rect x="84.1537%" y="277" width="0.0313%" height="15" fill="rgb(236,28,36)" fg:x="583776672811" fg:w="216941538"/><text x="84.4037%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (216,941,538 samples, 0.03%)</title><rect x="84.1537%" y="261" width="0.0313%" height="15" fill="rgb(249,185,26)" fg:x="583776672811" fg:w="216941538"/><text x="84.4037%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (216,941,538 samples, 0.03%)</title><rect x="84.1537%" y="245" width="0.0313%" height="15" fill="rgb(249,174,33)" fg:x="583776672811" fg:w="216941538"/><text x="84.4037%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,220,287,477 samples, 0.18%)</title><rect x="86.1559%" y="181" width="0.1759%" height="15" fill="rgb(233,201,37)" fg:x="597665711882" fg:w="1220287477"/><text x="86.4059%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,182,276,875 samples, 0.31%)</title><rect x="86.0326%" y="197" width="0.3146%" height="15" fill="rgb(221,78,26)" fg:x="596810148287" fg:w="2182276875"/><text x="86.2826%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (106,425,803 samples, 0.02%)</title><rect x="86.3318%" y="181" width="0.0153%" height="15" fill="rgb(250,127,30)" fg:x="598885999359" fg:w="106425803"/><text x="86.5818%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,445,905,351 samples, 0.64%)</title><rect x="88.2681%" y="181" width="0.6409%" height="15" fill="rgb(230,49,44)" fg:x="612318199473" fg:w="4445905351"/><text x="88.5181%" y="191.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h4a98b013d8962886E.llvm.1230319080565814185 (32,676,282,414 samples, 4.71%)</title><rect x="84.2027%" y="213" width="4.7104%" height="15" fill="rgb(229,67,23)" fg:x="584116414114" fg:w="32676282414"/><text x="84.4527%" y="223.50">_ZN71..</text></g><g><title>core::hash::sip::u8to64_le (17,800,271,366 samples, 2.57%)</title><rect x="86.3471%" y="197" width="2.5660%" height="15" fill="rgb(249,83,47)" fg:x="598992425162" fg:w="17800271366"/><text x="86.5971%" y="207.50">co..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (368,434,810 samples, 0.05%)</title><rect x="90.1108%" y="165" width="0.0531%" height="15" fill="rgb(215,43,3)" fg:x="625101186831" fg:w="368434810"/><text x="90.3608%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,437,405,787 samples, 0.21%)</title><rect x="90.0134%" y="181" width="0.2072%" height="15" fill="rgb(238,154,13)" fg:x="624425491600" fg:w="1437405787"/><text x="90.2634%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (393,275,746 samples, 0.06%)</title><rect x="90.1639%" y="165" width="0.0567%" height="15" fill="rgb(219,56,2)" fg:x="625469621641" fg:w="393275746"/><text x="90.4139%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (83,499,844,622 samples, 12.04%)</title><rect x="78.8881%" y="325" width="12.0368%" height="15" fill="rgb(233,0,4)" fg:x="547248868771" fg:w="83499844622"/><text x="79.1381%" y="335.50">hashbrown::map::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (83,401,579,231 samples, 12.02%)</title><rect x="78.9023%" y="309" width="12.0227%" height="15" fill="rgb(235,30,7)" fg:x="547347134162" fg:w="83401579231"/><text x="79.1523%" y="319.50">core::hash::BuildH..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (46,750,993,329 samples, 6.74%)</title><rect x="84.1856%" y="293" width="6.7393%" height="15" fill="rgb(250,79,13)" fg:x="583997720064" fg:w="46750993329"/><text x="84.4356%" y="303.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (46,750,993,329 samples, 6.74%)</title><rect x="84.1856%" y="277" width="6.7393%" height="15" fill="rgb(211,146,34)" fg:x="583997720064" fg:w="46750993329"/><text x="84.4356%" y="287.50">core::has..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (46,750,993,329 samples, 6.74%)</title><rect x="84.1856%" y="261" width="6.7393%" height="15" fill="rgb(228,22,38)" fg:x="583997720064" fg:w="46750993329"/><text x="84.4356%" y="271.50">&lt;std::has..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (46,750,993,329 samples, 6.74%)</title><rect x="84.1856%" y="245" width="6.7393%" height="15" fill="rgb(235,168,5)" fg:x="583997720064" fg:w="46750993329"/><text x="84.4356%" y="255.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (46,750,993,329 samples, 6.74%)</title><rect x="84.1856%" y="229" width="6.7393%" height="15" fill="rgb(221,155,16)" fg:x="583997720064" fg:w="46750993329"/><text x="84.4356%" y="239.50">&lt;core::ha..</text></g><g><title>core::hash::Hasher::write_u8 (13,956,016,865 samples, 2.01%)</title><rect x="88.9131%" y="213" width="2.0118%" height="15" fill="rgb(215,215,53)" fg:x="616792696528" fg:w="13956016865"/><text x="89.1631%" y="223.50">c..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h4a98b013d8962886E.llvm.1230319080565814185 (12,483,163,694 samples, 1.80%)</title><rect x="89.1254%" y="197" width="1.7995%" height="15" fill="rgb(223,4,10)" fg:x="618265549699" fg:w="12483163694"/><text x="89.3754%" y="207.50">_..</text></g><g><title>core::hash::sip::u8to64_le (4,857,137,459 samples, 0.70%)</title><rect x="90.2248%" y="181" width="0.7002%" height="15" fill="rgb(234,103,6)" fg:x="625891575934" fg:w="4857137459"/><text x="90.4748%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,481,407,868 samples, 0.79%)</title><rect x="91.2911%" y="277" width="0.7902%" height="15" fill="rgb(227,97,0)" fg:x="633289118341" fg:w="5481407868"/><text x="91.5411%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5,481,407,868 samples, 0.79%)</title><rect x="91.2911%" y="261" width="0.7902%" height="15" fill="rgb(234,150,53)" fg:x="633289118341" fg:w="5481407868"/><text x="91.5411%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (36,122,960,118 samples, 5.21%)</title><rect x="92.0813%" y="261" width="5.2073%" height="15" fill="rgb(228,201,54)" fg:x="638770526209" fg:w="36122960118"/><text x="92.3313%" y="271.50">hashbr..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (36,122,960,118 samples, 5.21%)</title><rect x="92.0813%" y="245" width="5.2073%" height="15" fill="rgb(222,22,37)" fg:x="638770526209" fg:w="36122960118"/><text x="92.3313%" y="255.50">&lt;Q as ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34,363,754,117 samples, 4.95%)</title><rect x="92.3349%" y="229" width="4.9537%" height="15" fill="rgb(237,53,32)" fg:x="640529732210" fg:w="34363754117"/><text x="92.5849%" y="239.50">core::..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (34,363,754,117 samples, 4.95%)</title><rect x="92.3349%" y="213" width="4.9537%" height="15" fill="rgb(233,25,53)" fg:x="640529732210" fg:w="34363754117"/><text x="92.5849%" y="223.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34,363,754,117 samples, 4.95%)</title><rect x="92.3349%" y="197" width="4.9537%" height="15" fill="rgb(210,40,34)" fg:x="640529732210" fg:w="34363754117"/><text x="92.5849%" y="207.50">core::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (34,363,754,117 samples, 4.95%)</title><rect x="92.3349%" y="181" width="4.9537%" height="15" fill="rgb(241,220,44)" fg:x="640529732210" fg:w="34363754117"/><text x="92.5849%" y="191.50">core::..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (34,363,754,117 samples, 4.95%)</title><rect x="92.3349%" y="165" width="4.9537%" height="15" fill="rgb(235,28,35)" fg:x="640529732210" fg:w="34363754117"/><text x="92.5849%" y="175.50">&lt;[A] a..</text></g><g><title>__memcmp_avx2_movbe (20,066,127,966 samples, 2.89%)</title><rect x="94.3960%" y="149" width="2.8926%" height="15" fill="rgb(210,56,17)" fg:x="654827358361" fg:w="20066127966"/><text x="94.6460%" y="159.50">__..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (258,144,264 samples, 0.04%)</title><rect x="97.2886%" y="261" width="0.0372%" height="15" fill="rgb(224,130,29)" fg:x="674893486327" fg:w="258144264"/><text x="97.5386%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (258,144,264 samples, 0.04%)</title><rect x="97.2886%" y="245" width="0.0372%" height="15" fill="rgb(235,212,8)" fg:x="674893486327" fg:w="258144264"/><text x="97.5386%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (258,144,264 samples, 0.04%)</title><rect x="97.2886%" y="229" width="0.0372%" height="15" fill="rgb(223,33,50)" fg:x="674893486327" fg:w="258144264"/><text x="97.5386%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (37,431,622,605 samples, 5.40%)</title><rect x="92.0813%" y="277" width="5.3959%" height="15" fill="rgb(219,149,13)" fg:x="638770526209" fg:w="37431622605"/><text x="92.3313%" y="287.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,050,518,223 samples, 0.15%)</title><rect x="97.3258%" y="261" width="0.1514%" height="15" fill="rgb(250,156,29)" fg:x="675151630591" fg:w="1050518223"/><text x="97.5758%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,050,518,223 samples, 0.15%)</title><rect x="97.3258%" y="245" width="0.1514%" height="15" fill="rgb(216,193,19)" fg:x="675151630591" fg:w="1050518223"/><text x="97.5758%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,050,518,223 samples, 0.15%)</title><rect x="97.3258%" y="229" width="0.1514%" height="15" fill="rgb(216,135,14)" fg:x="675151630591" fg:w="1050518223"/><text x="97.5758%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (880,215,778 samples, 0.13%)</title><rect x="97.4772%" y="277" width="0.1269%" height="15" fill="rgb(241,47,5)" fg:x="676202148814" fg:w="880215778"/><text x="97.7272%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (6,804,745,350 samples, 0.98%)</title><rect x="97.6130%" y="277" width="0.9809%" height="15" fill="rgb(233,42,35)" fg:x="677143835280" fg:w="6804745350"/><text x="97.8630%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,326,967,878 samples, 0.19%)</title><rect x="98.5939%" y="277" width="0.1913%" height="15" fill="rgb(231,13,6)" fg:x="683948580630" fg:w="1326967878"/><text x="98.8439%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,326,967,878 samples, 0.19%)</title><rect x="98.5939%" y="261" width="0.1913%" height="15" fill="rgb(207,181,40)" fg:x="683948580630" fg:w="1326967878"/><text x="98.8439%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,326,967,878 samples, 0.19%)</title><rect x="98.5939%" y="245" width="0.1913%" height="15" fill="rgb(254,173,49)" fg:x="683948580630" fg:w="1326967878"/><text x="98.8439%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7,007,831,459 samples, 1.01%)</title><rect x="98.7852%" y="277" width="1.0102%" height="15" fill="rgb(221,1,38)" fg:x="685275548508" fg:w="7007831459"/><text x="99.0352%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7,007,831,459 samples, 1.01%)</title><rect x="98.7852%" y="261" width="1.0102%" height="15" fill="rgb(206,124,46)" fg:x="685275548508" fg:w="7007831459"/><text x="99.0352%" y="271.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="645" width="99.9559%" height="15" fill="rgb(249,21,11)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="655.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="629" width="99.9559%" height="15" fill="rgb(222,201,40)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="639.50">__libc_start_call_main</text></g><g><title>main (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="613" width="99.9559%" height="15" fill="rgb(235,61,29)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="597" width="99.9559%" height="15" fill="rgb(219,207,3)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="581" width="99.9559%" height="15" fill="rgb(222,56,46)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="565" width="99.9559%" height="15" fill="rgb(239,76,54)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="549" width="99.9559%" height="15" fill="rgb(231,124,27)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="533" width="99.9559%" height="15" fill="rgb(249,195,6)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="543.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="517" width="99.9559%" height="15" fill="rgb(237,174,47)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="501" width="99.9559%" height="15" fill="rgb(206,201,31)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="485" width="99.9559%" height="15" fill="rgb(231,57,52)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="469" width="99.9559%" height="15" fill="rgb(248,177,22)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h930ae357c8520940E.llvm.17174913723918637526 (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="453" width="99.9559%" height="15" fill="rgb(215,211,37)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="463.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h930ae357c8520940E.llvm.17174913723918637526</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="437" width="99.9559%" height="15" fill="rgb(241,128,51)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="421" width="99.9559%" height="15" fill="rgb(227,165,31)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>hovinen::main (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="405" width="99.9559%" height="15" fill="rgb(228,167,24)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="415.50">hovinen::main</text></g><g><title>hovinen::process_file (693,396,797,852 samples, 99.96%)</title><rect x="0.0071%" y="389" width="99.9559%" height="15" fill="rgb(228,143,12)" fg:x="48978334" fg:w="693396797852"/><text x="0.2571%" y="399.50">hovinen::process_file</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (147,027,436,509 samples, 21.19%)</title><rect x="78.7684%" y="373" width="21.1946%" height="15" fill="rgb(249,149,8)" fg:x="546418339677" fg:w="147027436509"/><text x="79.0184%" y="383.50">std::collections::hash::map::Hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (147,027,436,509 samples, 21.19%)</title><rect x="78.7684%" y="357" width="21.1946%" height="15" fill="rgb(243,35,44)" fg:x="546418339677" fg:w="147027436509"/><text x="79.0184%" y="367.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (147,027,436,509 samples, 21.19%)</title><rect x="78.7684%" y="341" width="21.1946%" height="15" fill="rgb(246,89,9)" fg:x="546418339677" fg:w="147027436509"/><text x="79.0184%" y="351.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (62,697,062,793 samples, 9.04%)</title><rect x="90.9249%" y="325" width="9.0380%" height="15" fill="rgb(233,213,13)" fg:x="630748713393" fg:w="62697062793"/><text x="91.1749%" y="335.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (62,697,062,793 samples, 9.04%)</title><rect x="90.9249%" y="309" width="9.0380%" height="15" fill="rgb(233,141,41)" fg:x="630748713393" fg:w="62697062793"/><text x="91.1749%" y="319.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (62,697,062,793 samples, 9.04%)</title><rect x="90.9249%" y="293" width="9.0380%" height="15" fill="rgb(239,167,4)" fg:x="630748713393" fg:w="62697062793"/><text x="91.1749%" y="303.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1,162,396,219 samples, 0.17%)</title><rect x="99.7954%" y="277" width="0.1676%" height="15" fill="rgb(209,217,16)" fg:x="692283379967" fg:w="1162396219"/><text x="100.0454%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,162,396,219 samples, 0.17%)</title><rect x="99.7954%" y="261" width="0.1676%" height="15" fill="rgb(219,88,35)" fg:x="692283379967" fg:w="1162396219"/><text x="100.0454%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,162,396,219 samples, 0.17%)</title><rect x="99.7954%" y="245" width="0.1676%" height="15" fill="rgb(220,193,23)" fg:x="692283379967" fg:w="1162396219"/><text x="100.0454%" y="255.50"></text></g><g><title>_start (693,399,978,821 samples, 99.96%)</title><rect x="0.0071%" y="661" width="99.9564%" height="15" fill="rgb(230,90,52)" fg:x="48978333" fg:w="693399978821"/><text x="0.2571%" y="671.50">_start</text></g><g><title>all (693,702,644,747 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="693702644747"/><text x="0.2500%" y="703.50"></text></g><g><title>hovinen (693,702,644,747 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="693702644747"/><text x="0.2500%" y="687.50">hovinen</text></g><g><title>read (229,072,604 samples, 0.03%)</title><rect x="99.9670%" y="661" width="0.0330%" height="15" fill="rgb(230,138,44)" fg:x="693473572143" fg:w="229072604"/><text x="100.2170%" y="671.50"></text></g><g><title>[unknown] (229,072,604 samples, 0.03%)</title><rect x="99.9670%" y="645" width="0.0330%" height="15" fill="rgb(235,182,43)" fg:x="693473572143" fg:w="229072604"/><text x="100.2170%" y="655.50"></text></g></svg></svg>
