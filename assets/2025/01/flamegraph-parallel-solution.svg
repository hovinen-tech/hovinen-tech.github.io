<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="420" onload="init(evt)" viewBox="0 0 1200 420" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1349.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="1087182034937"><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}} (162,825,726 samples, 0.01%)</title><rect x="0.0013%" y="613" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="14495017" fg:w="162825726"/><text x="0.2513%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (173,853,039 samples, 0.02%)</title><rect x="0.0011%" y="805" width="0.0160%" height="15" fill="rgb(217,0,24)" fg:x="11564256" fg:w="173853039"/><text x="0.2511%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}} (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="789" width="0.0157%" height="15" fill="rgb(221,193,54)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="799.50"></text></g><g><title>tokio::runtime::coop::budget (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="773" width="0.0157%" height="15" fill="rgb(248,212,6)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="783.50"></text></g><g><title>tokio::runtime::coop::with_budget (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="757" width="0.0157%" height="15" fill="rgb(208,68,35)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}}::_{{closure}} (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="741" width="0.0157%" height="15" fill="rgb(232,128,0)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="751.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="725" width="0.0157%" height="15" fill="rgb(207,160,47)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="735.50"></text></g><g><title>tokio::task::local::LocalSet::run_until::_{{closure}} (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="709" width="0.0157%" height="15" fill="rgb(228,23,34)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="719.50"></text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="693" width="0.0157%" height="15" fill="rgb(218,30,26)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="703.50"></text></g><g><title>tokio::task::local::LocalSet::with (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="677" width="0.0157%" height="15" fill="rgb(220,122,19)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="661" width="0.0157%" height="15" fill="rgb(250,228,42)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="645" width="0.0157%" height="15" fill="rgb(240,193,28)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="655.50"></text></g><g><title>tokio::task::local::LocalSet::with::_{{closure}} (170,922,278 samples, 0.02%)</title><rect x="0.0013%" y="629" width="0.0157%" height="15" fill="rgb(216,20,37)" fg:x="14495017" fg:w="170922278"/><text x="0.2513%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (113,099,961 samples, 0.01%)</title><rect x="0.0171%" y="805" width="0.0104%" height="15" fill="rgb(206,188,39)" fg:x="185417295" fg:w="113099961"/><text x="0.2671%" y="815.50"></text></g><g><title>std::panic::catch_unwind (301,632,223 samples, 0.03%)</title><rect x="0.0003%" y="1173" width="0.0277%" height="15" fill="rgb(217,207,13)" fg:x="3351671" fg:w="301632223"/><text x="0.2503%" y="1183.50"></text></g><g><title>std::panicking::try (301,632,223 samples, 0.03%)</title><rect x="0.0003%" y="1157" width="0.0277%" height="15" fill="rgb(231,73,38)" fg:x="3351671" fg:w="301632223"/><text x="0.2503%" y="1167.50"></text></g><g><title>std::panicking::try::do_call (301,632,223 samples, 0.03%)</title><rect x="0.0003%" y="1141" width="0.0277%" height="15" fill="rgb(225,20,46)" fg:x="3351671" fg:w="301632223"/><text x="0.2503%" y="1151.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (301,632,223 samples, 0.03%)</title><rect x="0.0003%" y="1125" width="0.0277%" height="15" fill="rgb(210,31,41)" fg:x="3351671" fg:w="301632223"/><text x="0.2503%" y="1135.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (301,632,223 samples, 0.03%)</title><rect x="0.0003%" y="1109" width="0.0277%" height="15" fill="rgb(221,200,47)" fg:x="3351671" fg:w="301632223"/><text x="0.2503%" y="1119.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (301,632,223 samples, 0.03%)</title><rect x="0.0003%" y="1093" width="0.0277%" height="15" fill="rgb(226,26,5)" fg:x="3351671" fg:w="301632223"/><text x="0.2503%" y="1103.50"></text></g><g><title>hovinen::process_file::_{{closure}}::_{{closure}} (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="1077" width="0.0277%" height="15" fill="rgb(249,33,26)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="1087.50"></text></g><g><title>tokio_uring::start (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="1061" width="0.0277%" height="15" fill="rgb(235,183,28)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="1071.50"></text></g><g><title>tokio_uring::runtime::Runtime::block_on (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="1045" width="0.0277%" height="15" fill="rgb(221,5,38)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="1055.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="1029" width="0.0277%" height="15" fill="rgb(247,18,42)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="1039.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="1013" width="0.0277%" height="15" fill="rgb(241,131,45)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="1023.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="997" width="0.0277%" height="15" fill="rgb(249,31,29)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="1007.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="981" width="0.0277%" height="15" fill="rgb(225,111,53)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on::_{{closure}} (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="965" width="0.0277%" height="15" fill="rgb(238,160,17)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="949" width="0.0277%" height="15" fill="rgb(214,148,48)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="933" width="0.0277%" height="15" fill="rgb(232,36,49)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="943.50"></text></g><g><title>tokio::runtime::context::set_scheduler (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="917" width="0.0277%" height="15" fill="rgb(209,103,24)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="901" width="0.0277%" height="15" fill="rgb(229,88,8)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="885" width="0.0277%" height="15" fill="rgb(213,181,19)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="895.50"></text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="869" width="0.0277%" height="15" fill="rgb(254,191,54)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="879.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="853" width="0.0277%" height="15" fill="rgb(241,83,37)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter::_{{closure}} (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="837" width="0.0277%" height="15" fill="rgb(233,36,39)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}} (301,458,546 samples, 0.03%)</title><rect x="0.0003%" y="821" width="0.0277%" height="15" fill="rgb(226,3,54)" fg:x="3525348" fg:w="301458546"/><text x="0.2503%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (301,797,986 samples, 0.03%)</title><rect x="0.0003%" y="1237" width="0.0278%" height="15" fill="rgb(245,192,40)" fg:x="3351671" fg:w="301797986"/><text x="0.2503%" y="1247.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (301,797,986 samples, 0.03%)</title><rect x="0.0003%" y="1221" width="0.0278%" height="15" fill="rgb(238,167,29)" fg:x="3351671" fg:w="301797986"/><text x="0.2503%" y="1231.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (301,797,986 samples, 0.03%)</title><rect x="0.0003%" y="1205" width="0.0278%" height="15" fill="rgb(232,182,51)" fg:x="3351671" fg:w="301797986"/><text x="0.2503%" y="1215.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (301,797,986 samples, 0.03%)</title><rect x="0.0003%" y="1189" width="0.0278%" height="15" fill="rgb(231,60,39)" fg:x="3351671" fg:w="301797986"/><text x="0.2503%" y="1199.50"></text></g><g><title>__GI___clone3 (302,492,369 samples, 0.03%)</title><rect x="0.0003%" y="1285" width="0.0278%" height="15" fill="rgb(208,69,12)" fg:x="3159171" fg:w="302492369"/><text x="0.2503%" y="1295.50"></text></g><g><title>start_thread (302,492,369 samples, 0.03%)</title><rect x="0.0003%" y="1269" width="0.0278%" height="15" fill="rgb(235,93,37)" fg:x="3159171" fg:w="302492369"/><text x="0.2503%" y="1279.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (302,299,869 samples, 0.03%)</title><rect x="0.0003%" y="1253" width="0.0278%" height="15" fill="rgb(213,116,39)" fg:x="3351671" fg:w="302299869"/><text x="0.2503%" y="1263.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1269" width="0.0244%" height="15" fill="rgb(222,207,29)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1279.50"></text></g><g><title>__libc_start_call_main (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1253" width="0.0244%" height="15" fill="rgb(206,96,30)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1263.50"></text></g><g><title>main (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1237" width="0.0244%" height="15" fill="rgb(218,138,4)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1247.50"></text></g><g><title>std::rt::lang_start_internal (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1221" width="0.0244%" height="15" fill="rgb(250,191,14)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1231.50"></text></g><g><title>std::panic::catch_unwind (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1205" width="0.0244%" height="15" fill="rgb(239,60,40)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1215.50"></text></g><g><title>std::panicking::try (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1189" width="0.0244%" height="15" fill="rgb(206,27,48)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1199.50"></text></g><g><title>std::panicking::try::do_call (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1173" width="0.0244%" height="15" fill="rgb(225,35,8)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1183.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1157" width="0.0244%" height="15" fill="rgb(250,213,24)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1141" width="0.0244%" height="15" fill="rgb(247,123,22)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1151.50"></text></g><g><title>std::panicking::try (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1125" width="0.0244%" height="15" fill="rgb(231,138,38)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1135.50"></text></g><g><title>std::panicking::try::do_call (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1109" width="0.0244%" height="15" fill="rgb(231,145,46)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1119.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1093" width="0.0244%" height="15" fill="rgb(251,118,11)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1103.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h70bbb9988474d6c0E.llvm.7600720784396286239 (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1077" width="0.0244%" height="15" fill="rgb(217,147,25)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1087.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1061" width="0.0244%" height="15" fill="rgb(247,81,37)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1071.50"></text></g><g><title>core::ops::function::FnOnce::call_once (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1045" width="0.0244%" height="15" fill="rgb(209,12,38)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1055.50"></text></g><g><title>hovinen::main (264,789,741 samples, 0.02%)</title><rect x="0.0281%" y="1029" width="0.0244%" height="15" fill="rgb(227,1,9)" fg:x="305651541" fg:w="264789741"/><text x="0.2781%" y="1039.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="1013" width="0.0242%" height="15" fill="rgb(248,47,43)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="1023.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="997" width="0.0242%" height="15" fill="rgb(221,10,30)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="981" width="0.0242%" height="15" fill="rgb(210,229,1)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="991.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="965" width="0.0242%" height="15" fill="rgb(222,148,37)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="949" width="0.0242%" height="15" fill="rgb(234,67,33)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="959.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="933" width="0.0242%" height="15" fill="rgb(247,98,35)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="943.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (263,537,654 samples, 0.02%)</title><rect x="0.0282%" y="917" width="0.0242%" height="15" fill="rgb(247,138,52)" fg:x="306903628" fg:w="263537654"/><text x="0.2782%" y="927.50"></text></g><g><title>tokio::runtime::coop::budget (248,585,798 samples, 0.02%)</title><rect x="0.0296%" y="901" width="0.0229%" height="15" fill="rgb(213,79,30)" fg:x="321855484" fg:w="248585798"/><text x="0.2796%" y="911.50"></text></g><g><title>tokio::runtime::coop::with_budget (248,585,798 samples, 0.02%)</title><rect x="0.0296%" y="885" width="0.0229%" height="15" fill="rgb(246,177,23)" fg:x="321855484" fg:w="248585798"/><text x="0.2796%" y="895.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (241,985,110 samples, 0.02%)</title><rect x="0.0302%" y="869" width="0.0223%" height="15" fill="rgb(230,62,27)" fg:x="328456172" fg:w="241985110"/><text x="0.2802%" y="879.50"></text></g><g><title>hovinen::main::_{{closure}} (241,985,110 samples, 0.02%)</title><rect x="0.0302%" y="853" width="0.0223%" height="15" fill="rgb(216,154,8)" fg:x="328456172" fg:w="241985110"/><text x="0.2802%" y="863.50"></text></g><g><title>hovinen::process_file::_{{closure}} (239,029,025 samples, 0.02%)</title><rect x="0.0305%" y="837" width="0.0220%" height="15" fill="rgb(244,35,45)" fg:x="331412257" fg:w="239029025"/><text x="0.2805%" y="847.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::spawn (119,370,723 samples, 0.01%)</title><rect x="0.0415%" y="821" width="0.0110%" height="15" fill="rgb(251,115,12)" fg:x="451070559" fg:w="119370723"/><text x="0.2915%" y="831.50"></text></g><g><title>_start (265,568,585 samples, 0.02%)</title><rect x="0.0281%" y="1285" width="0.0244%" height="15" fill="rgb(240,54,50)" fg:x="305651540" fg:w="265568585"/><text x="0.2781%" y="1295.50"></text></g><g><title>hovinen (571,220,500 samples, 0.05%)</title><rect x="0.0000%" y="1301" width="0.0525%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="571220500"/><text x="0.2500%" y="1311.50"></text></g><g><title>[unknown] (651,499,204 samples, 0.06%)</title><rect x="0.0525%" y="1285" width="0.0599%" height="15" fill="rgb(207,117,47)" fg:x="571220500" fg:w="651499204"/><text x="0.3025%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (927,057,793 samples, 0.09%)</title><rect x="0.1628%" y="293" width="0.0853%" height="15" fill="rgb(249,43,39)" fg:x="1770153825" fg:w="927057793"/><text x="0.4128%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (868,760,846 samples, 0.08%)</title><rect x="0.1682%" y="277" width="0.0799%" height="15" fill="rgb(209,38,44)" fg:x="1828450772" fg:w="868760846"/><text x="0.4182%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (17,079,099,703 samples, 1.57%)</title><rect x="0.5769%" y="261" width="1.5710%" height="15" fill="rgb(236,212,23)" fg:x="6271914238" fg:w="17079099703"/><text x="0.8269%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (16,387,364,047 samples, 1.51%)</title><rect x="0.6405%" y="245" width="1.5073%" height="15" fill="rgb(242,79,21)" fg:x="6963649894" fg:w="16387364047"/><text x="0.8905%" y="255.50"></text></g><g><title>hovinen::process_buffer::_{{closure}} (16,387,364,047 samples, 1.51%)</title><rect x="0.6405%" y="229" width="1.5073%" height="15" fill="rgb(211,96,35)" fg:x="6963649894" fg:w="16387364047"/><text x="0.8905%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17,121,034,173 samples, 1.57%)</title><rect x="2.1478%" y="261" width="1.5748%" height="15" fill="rgb(253,215,40)" fg:x="23351013941" fg:w="17121034173"/><text x="2.3978%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10,908,076,693 samples, 1.00%)</title><rect x="2.7193%" y="245" width="1.0033%" height="15" fill="rgb(211,81,21)" fg:x="29563971421" fg:w="10908076693"/><text x="2.9693%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (38,897,000,908 samples, 3.58%)</title><rect x="0.1452%" y="325" width="3.5778%" height="15" fill="rgb(208,190,38)" fg:x="1578448464" fg:w="38897000908"/><text x="0.3952%" y="335.50">core..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (38,890,485,795 samples, 3.58%)</title><rect x="0.1458%" y="309" width="3.5772%" height="15" fill="rgb(235,213,38)" fg:x="1584963577" fg:w="38890485795"/><text x="0.3958%" y="319.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (37,778,237,754 samples, 3.47%)</title><rect x="0.2481%" y="293" width="3.4749%" height="15" fill="rgb(237,122,38)" fg:x="2697211618" fg:w="37778237754"/><text x="0.4981%" y="303.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (37,778,237,754 samples, 3.47%)</title><rect x="0.2481%" y="277" width="3.4749%" height="15" fill="rgb(244,218,35)" fg:x="2697211618" fg:w="37778237754"/><text x="0.4981%" y="287.50">cor..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16,830,996,940 samples, 1.55%)</title><rect x="3.7245%" y="325" width="1.5481%" height="15" fill="rgb(240,68,47)" fg:x="40491853416" fg:w="16830996940"/><text x="3.9745%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16,830,996,940 samples, 1.55%)</title><rect x="3.7245%" y="309" width="1.5481%" height="15" fill="rgb(210,16,53)" fg:x="40491853416" fg:w="16830996940"/><text x="3.9745%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (15,402,545,245 samples, 1.42%)</title><rect x="3.8559%" y="293" width="1.4167%" height="15" fill="rgb(235,124,12)" fg:x="41920305111" fg:w="15402545245"/><text x="4.1059%" y="303.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::max (653,079,472 samples, 0.06%)</title><rect x="10.3955%" y="309" width="0.0601%" height="15" fill="rgb(224,169,11)" fg:x="113017790880" fg:w="653079472"/><text x="10.6455%" y="319.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::min (1,460,223,783 samples, 0.13%)</title><rect x="10.4556%" y="309" width="0.1343%" height="15" fill="rgb(250,166,2)" fg:x="113670870352" fg:w="1460223783"/><text x="10.7056%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold::enumerate::_{{closure}} (5,320,706,255 samples, 0.49%)</title><rect x="10.6258%" y="229" width="0.4894%" height="15" fill="rgb(242,216,29)" fg:x="115521773711" fg:w="5320706255"/><text x="10.8758%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (5,320,706,255 samples, 0.49%)</title><rect x="10.6258%" y="213" width="0.4894%" height="15" fill="rgb(230,116,27)" fg:x="115521773711" fg:w="5320706255"/><text x="10.8758%" y="223.50"></text></g><g><title>hovinen::process_line::_{{closure}} (5,320,706,255 samples, 0.49%)</title><rect x="10.6258%" y="197" width="0.4894%" height="15" fill="rgb(228,99,48)" fg:x="115521773711" fg:w="5320706255"/><text x="10.8758%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8,469,538,646 samples, 0.78%)</title><rect x="10.5957%" y="277" width="0.7790%" height="15" fill="rgb(253,11,6)" fg:x="115195035836" fg:w="8469538646"/><text x="10.8457%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::try_rfold (8,469,538,646 samples, 0.78%)</title><rect x="10.5957%" y="261" width="0.7790%" height="15" fill="rgb(247,143,39)" fg:x="115195035836" fg:w="8469538646"/><text x="10.8457%" y="271.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (8,469,538,646 samples, 0.78%)</title><rect x="10.5957%" y="245" width="0.7790%" height="15" fill="rgb(236,97,10)" fg:x="115195035836" fg:w="8469538646"/><text x="10.8457%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2,822,094,516 samples, 0.26%)</title><rect x="11.1152%" y="229" width="0.2596%" height="15" fill="rgb(233,208,19)" fg:x="120842479966" fg:w="2822094516"/><text x="11.3652%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,357,790,410 samples, 0.12%)</title><rect x="11.2499%" y="213" width="0.1249%" height="15" fill="rgb(216,164,2)" fg:x="122306784072" fg:w="1357790410"/><text x="11.4999%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (8,545,633,979 samples, 0.79%)</title><rect x="10.5899%" y="309" width="0.7860%" height="15" fill="rgb(220,129,5)" fg:x="115131094135" fg:w="8545633979"/><text x="10.8399%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8,545,633,979 samples, 0.79%)</title><rect x="10.5899%" y="293" width="0.7860%" height="15" fill="rgb(242,17,10)" fg:x="115131094135" fg:w="8545633979"/><text x="10.8399%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (76,962,604,455 samples, 7.08%)</title><rect x="11.3820%" y="245" width="7.0791%" height="15" fill="rgb(242,107,0)" fg:x="123742620712" fg:w="76962604455"/><text x="11.6320%" y="255.50">core::res..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (76,962,604,455 samples, 7.08%)</title><rect x="11.3820%" y="229" width="7.0791%" height="15" fill="rgb(251,28,31)" fg:x="123742620712" fg:w="76962604455"/><text x="11.6320%" y="239.50">core::res..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (156,614,414 samples, 0.01%)</title><rect x="18.4790%" y="213" width="0.0144%" height="15" fill="rgb(233,223,10)" fg:x="200900038282" fg:w="156614414"/><text x="18.7290%" y="223.50"></text></g><g><title>syscall (156,614,414 samples, 0.01%)</title><rect x="18.4790%" y="197" width="0.0144%" height="15" fill="rgb(215,21,27)" fg:x="200900038282" fg:w="156614414"/><text x="18.7290%" y="207.50"></text></g><g><title>[unknown] (156,606,523 samples, 0.01%)</title><rect x="18.4790%" y="181" width="0.0144%" height="15" fill="rgb(232,23,21)" fg:x="200900046173" fg:w="156606523"/><text x="18.7290%" y="191.50"></text></g><g><title>[unknown] (139,991,650 samples, 0.01%)</title><rect x="18.4805%" y="165" width="0.0129%" height="15" fill="rgb(244,5,23)" fg:x="200916661046" fg:w="139991650"/><text x="18.7305%" y="175.50"></text></g><g><title>[unknown] (116,411,325 samples, 0.01%)</title><rect x="18.4827%" y="149" width="0.0107%" height="15" fill="rgb(226,81,46)" fg:x="200940241371" fg:w="116411325"/><text x="18.7327%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (120,701,373 samples, 0.01%)</title><rect x="18.4989%" y="213" width="0.0111%" height="15" fill="rgb(247,70,30)" fg:x="201116485142" fg:w="120701373"/><text x="18.7489%" y="223.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (114,058,825 samples, 0.01%)</title><rect x="18.4995%" y="197" width="0.0105%" height="15" fill="rgb(212,68,19)" fg:x="201123127690" fg:w="114058825"/><text x="18.7495%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::RefMut&lt;alloc::string::String,(f64,f64,f64,u32)&gt;&gt; (77,567,316,219 samples, 7.13%)</title><rect x="11.3759%" y="309" width="7.1347%" height="15" fill="rgb(240,187,13)" fg:x="123676728114" fg:w="77567316219"/><text x="11.6259%" y="319.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::raw::inner::RawTable&lt;(alloc::string::String,dashmap::util::SharedValue&lt;(f64,f64,f64,u32)&gt;)&gt;&gt;&gt; (77,567,316,219 samples, 7.13%)</title><rect x="11.3759%" y="293" width="7.1347%" height="15" fill="rgb(223,113,26)" fg:x="123676728114" fg:w="77567316219"/><text x="11.6259%" y="303.50">core::ptr:..</text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (77,567,316,219 samples, 7.13%)</title><rect x="11.3759%" y="277" width="7.1347%" height="15" fill="rgb(206,192,2)" fg:x="123676728114" fg:w="77567316219"/><text x="11.6259%" y="287.50">&lt;lock_api:..</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (77,567,316,219 samples, 7.13%)</title><rect x="11.3759%" y="261" width="7.1347%" height="15" fill="rgb(241,108,4)" fg:x="123676728114" fg:w="77567316219"/><text x="11.6259%" y="271.50">&lt;dashmap::..</text></g><g><title>dashmap::lock::RawRwLock::unlock_exclusive_slow (525,927,569 samples, 0.05%)</title><rect x="18.4622%" y="245" width="0.0484%" height="15" fill="rgb(247,173,49)" fg:x="200718116764" fg:w="525927569"/><text x="18.7122%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (480,649,546 samples, 0.04%)</title><rect x="18.4664%" y="229" width="0.0442%" height="15" fill="rgb(224,114,35)" fg:x="200763394787" fg:w="480649546"/><text x="18.7164%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (511,529,560 samples, 0.05%)</title><rect x="18.5106%" y="293" width="0.0471%" height="15" fill="rgb(245,159,27)" fg:x="201244044333" fg:w="511529560"/><text x="18.7606%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (112,040,434 samples, 0.01%)</title><rect x="18.5474%" y="277" width="0.0103%" height="15" fill="rgb(245,172,44)" fg:x="201643533459" fg:w="112040434"/><text x="18.7974%" y="287.50"></text></g><g><title>core::slice::index::get_noubcheck (112,040,434 samples, 0.01%)</title><rect x="18.5474%" y="261" width="0.0103%" height="15" fill="rgb(236,23,11)" fg:x="201643533459" fg:w="112040434"/><text x="18.7974%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,833,758,031 samples, 0.63%)</title><rect x="18.5106%" y="309" width="0.6286%" height="15" fill="rgb(205,117,38)" fg:x="201244044333" fg:w="6833758031"/><text x="18.7606%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,322,228,471 samples, 0.58%)</title><rect x="18.5577%" y="293" width="0.5815%" height="15" fill="rgb(237,72,25)" fg:x="201755573893" fg:w="6322228471"/><text x="18.8077%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,322,228,471 samples, 0.58%)</title><rect x="18.5577%" y="277" width="0.5815%" height="15" fill="rgb(244,70,9)" fg:x="201755573893" fg:w="6322228471"/><text x="18.8077%" y="287.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (15,447,492,037 samples, 1.42%)</title><rect x="30.1859%" y="261" width="1.4209%" height="15" fill="rgb(217,125,39)" fg:x="328175576422" fg:w="15447492037"/><text x="30.4359%" y="271.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (6,284,080,554 samples, 0.58%)</title><rect x="31.0287%" y="245" width="0.5780%" height="15" fill="rgb(235,36,10)" fg:x="337338987905" fg:w="6284080554"/><text x="31.2787%" y="255.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (4,662,526,412 samples, 0.43%)</title><rect x="35.7193%" y="197" width="0.4289%" height="15" fill="rgb(251,123,47)" fg:x="388334119660" fg:w="4662526412"/><text x="35.9693%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (1,509,220,799 samples, 0.14%)</title><rect x="36.1482%" y="197" width="0.1388%" height="15" fill="rgb(221,13,13)" fg:x="392996646072" fg:w="1509220799"/><text x="36.3982%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (516,929,920 samples, 0.05%)</title><rect x="36.2395%" y="181" width="0.0475%" height="15" fill="rgb(238,131,9)" fg:x="393988936951" fg:w="516929920"/><text x="36.4895%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (20,366,696,829 samples, 1.87%)</title><rect x="35.3402%" y="229" width="1.8733%" height="15" fill="rgb(211,50,8)" fg:x="384212094524" fg:w="20366696829"/><text x="35.5902%" y="239.50">c..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (19,975,492,488 samples, 1.84%)</title><rect x="35.3762%" y="213" width="1.8374%" height="15" fill="rgb(245,182,24)" fg:x="384603298865" fg:w="19975492488"/><text x="35.6262%" y="223.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (10,072,924,482 samples, 0.93%)</title><rect x="36.2870%" y="197" width="0.9265%" height="15" fill="rgb(242,14,37)" fg:x="394505866871" fg:w="10072924482"/><text x="36.5370%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (63,228,826,879 samples, 5.82%)</title><rect x="31.6068%" y="261" width="5.8158%" height="15" fill="rgb(246,228,12)" fg:x="343623068459" fg:w="63228826879"/><text x="31.8568%" y="271.50">core::n..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (31,510,550,847 samples, 2.90%)</title><rect x="34.5242%" y="245" width="2.8984%" height="15" fill="rgb(213,55,15)" fg:x="375341344491" fg:w="31510550847"/><text x="34.7742%" y="255.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (2,273,103,985 samples, 0.21%)</title><rect x="37.2135%" y="229" width="0.2091%" height="15" fill="rgb(209,9,3)" fg:x="404578791353" fg:w="2273103985"/><text x="37.4635%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (198,801,088,237 samples, 18.29%)</title><rect x="19.1392%" y="309" width="18.2859%" height="15" fill="rgb(230,59,30)" fg:x="208077802364" fg:w="198801088237"/><text x="19.3892%" y="319.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (198,287,874,272 samples, 18.24%)</title><rect x="19.1864%" y="293" width="18.2387%" height="15" fill="rgb(209,121,21)" fg:x="208591016329" fg:w="198287874272"/><text x="19.4364%" y="303.50">core::num::dec2flt::&lt;impl co..</text></g><g><title>core::num::dec2flt::dec2flt (184,380,629,450 samples, 16.96%)</title><rect x="20.4656%" y="277" width="16.9595%" height="15" fill="rgb(220,109,13)" fg:x="222498261151" fg:w="184380629450"/><text x="20.7156%" y="287.50">core::num::dec2flt::dec2flt</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2,150,250,897 samples, 0.20%)</title><rect x="38.1375%" y="261" width="0.1978%" height="15" fill="rgb(232,18,1)" fg:x="414623526304" fg:w="2150250897"/><text x="38.3875%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,150,250,897 samples, 0.20%)</title><rect x="38.1375%" y="245" width="0.1978%" height="15" fill="rgb(215,41,42)" fg:x="414623526304" fg:w="2150250897"/><text x="38.3875%" y="255.50"></text></g><g><title>core::slice::index::get_noubcheck (2,150,250,897 samples, 0.20%)</title><rect x="38.1375%" y="229" width="0.1978%" height="15" fill="rgb(224,123,36)" fg:x="414623526304" fg:w="2150250897"/><text x="38.3875%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (222,748,159,480 samples, 20.49%)</title><rect x="38.4400%" y="229" width="20.4886%" height="15" fill="rgb(240,125,3)" fg:x="417913151520" fg:w="222748159480"/><text x="38.6900%" y="239.50">core::result::Result&lt;T,E&gt;::is_err</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (222,748,159,480 samples, 20.49%)</title><rect x="38.4400%" y="213" width="20.4886%" height="15" fill="rgb(205,98,50)" fg:x="417913151520" fg:w="222748159480"/><text x="38.6900%" y="223.50">core::result::Result&lt;T,E&gt;::is_ok</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (125,139,670 samples, 0.01%)</title><rect x="61.1468%" y="213" width="0.0115%" height="15" fill="rgb(205,185,37)" fg:x="664777044255" fg:w="125139670"/><text x="61.3968%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (125,139,670 samples, 0.01%)</title><rect x="61.1468%" y="197" width="0.0115%" height="15" fill="rgb(238,207,15)" fg:x="664777044255" fg:w="125139670"/><text x="61.3968%" y="207.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (181,435,064 samples, 0.02%)</title><rect x="61.1589%" y="165" width="0.0167%" height="15" fill="rgb(213,199,42)" fg:x="664908315453" fg:w="181435064"/><text x="61.4089%" y="175.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (181,435,058 samples, 0.02%)</title><rect x="61.1589%" y="149" width="0.0167%" height="15" fill="rgb(235,201,11)" fg:x="664908315459" fg:w="181435058"/><text x="61.4089%" y="159.50"></text></g><g><title>syscall (151,120,293 samples, 0.01%)</title><rect x="61.1617%" y="133" width="0.0139%" height="15" fill="rgb(207,46,11)" fg:x="664938630224" fg:w="151120293"/><text x="61.4117%" y="143.50"></text></g><g><title>[unknown] (151,120,293 samples, 0.01%)</title><rect x="61.1617%" y="117" width="0.0139%" height="15" fill="rgb(241,35,35)" fg:x="664938630224" fg:w="151120293"/><text x="61.4117%" y="127.50"></text></g><g><title>[unknown] (147,756,355 samples, 0.01%)</title><rect x="61.1620%" y="101" width="0.0136%" height="15" fill="rgb(243,32,47)" fg:x="664941994162" fg:w="147756355"/><text x="61.4120%" y="111.50"></text></g><g><title>[unknown] (118,147,571 samples, 0.01%)</title><rect x="61.1647%" y="85" width="0.0109%" height="15" fill="rgb(247,202,23)" fg:x="664971602946" fg:w="118147571"/><text x="61.4147%" y="95.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (330,137,733 samples, 0.03%)</title><rect x="61.1589%" y="181" width="0.0304%" height="15" fill="rgb(219,102,11)" fg:x="664908315453" fg:w="330137733"/><text x="61.4089%" y="191.50"></text></g><g><title>parking_lot_core::parking_lot::park (343,406,600 samples, 0.03%)</title><rect x="61.1589%" y="213" width="0.0316%" height="15" fill="rgb(243,110,44)" fg:x="664908315453" fg:w="343406600"/><text x="61.4089%" y="223.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (343,406,600 samples, 0.03%)</title><rect x="61.1589%" y="197" width="0.0316%" height="15" fill="rgb(222,74,54)" fg:x="664908315453" fg:w="343406600"/><text x="61.4089%" y="207.50"></text></g><g><title>core::hint::spin_loop (5,833,088,413 samples, 0.54%)</title><rect x="61.2274%" y="181" width="0.5365%" height="15" fill="rgb(216,99,12)" fg:x="665652895043" fg:w="5833088413"/><text x="61.4774%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (5,833,088,413 samples, 0.54%)</title><rect x="61.2274%" y="165" width="0.5365%" height="15" fill="rgb(226,22,26)" fg:x="665652895043" fg:w="5833088413"/><text x="61.4774%" y="175.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (23,682,289,724 samples, 2.18%)</title><rect x="61.2274%" y="197" width="2.1783%" height="15" fill="rgb(217,163,10)" fg:x="665652895043" fg:w="23682289724"/><text x="61.4774%" y="207.50">p..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (17,849,201,311 samples, 1.64%)</title><rect x="61.7639%" y="181" width="1.6418%" height="15" fill="rgb(213,25,53)" fg:x="671485983456" fg:w="17849201311"/><text x="62.0139%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (17,849,201,311 samples, 1.64%)</title><rect x="61.7639%" y="165" width="1.6418%" height="15" fill="rgb(252,105,26)" fg:x="671485983456" fg:w="17849201311"/><text x="62.0139%" y="175.50"></text></g><g><title>__sched_yield (22,431,107,723 samples, 2.06%)</title><rect x="63.4150%" y="181" width="2.0632%" height="15" fill="rgb(220,39,43)" fg:x="689436964517" fg:w="22431107723"/><text x="63.6650%" y="191.50">_..</text></g><g><title>[unknown] (22,364,333,606 samples, 2.06%)</title><rect x="63.4212%" y="165" width="2.0571%" height="15" fill="rgb(229,68,48)" fg:x="689503738634" fg:w="22364333606"/><text x="63.6712%" y="175.50">[..</text></g><g><title>[unknown] (18,325,297,731 samples, 1.69%)</title><rect x="63.7927%" y="149" width="1.6856%" height="15" fill="rgb(252,8,32)" fg:x="693542774509" fg:w="18325297731"/><text x="64.0427%" y="159.50"></text></g><g><title>[unknown] (15,411,378,683 samples, 1.42%)</title><rect x="64.0607%" y="133" width="1.4176%" height="15" fill="rgb(223,20,43)" fg:x="696456693557" fg:w="15411378683"/><text x="64.3107%" y="143.50"></text></g><g><title>[unknown] (15,160,223,262 samples, 1.39%)</title><rect x="64.0838%" y="117" width="1.3945%" height="15" fill="rgb(229,81,49)" fg:x="696707848978" fg:w="15160223262"/><text x="64.3338%" y="127.50"></text></g><g><title>[unknown] (11,493,640,961 samples, 1.06%)</title><rect x="64.4211%" y="101" width="1.0572%" height="15" fill="rgb(236,28,36)" fg:x="700374431279" fg:w="11493640961"/><text x="64.6711%" y="111.50"></text></g><g><title>[unknown] (6,413,784,652 samples, 0.59%)</title><rect x="64.8883%" y="85" width="0.5899%" height="15" fill="rgb(249,185,26)" fg:x="705454287588" fg:w="6413784652"/><text x="65.1383%" y="95.50"></text></g><g><title>[unknown] (3,361,261,644 samples, 0.31%)</title><rect x="65.1691%" y="69" width="0.3092%" height="15" fill="rgb(249,174,33)" fg:x="708506810596" fg:w="3361261644"/><text x="65.4191%" y="79.50"></text></g><g><title>[unknown] (1,891,121,018 samples, 0.17%)</title><rect x="65.3043%" y="53" width="0.1739%" height="15" fill="rgb(233,201,37)" fg:x="709976951222" fg:w="1891121018"/><text x="65.5543%" y="63.50"></text></g><g><title>[unknown] (1,662,689,379 samples, 0.15%)</title><rect x="65.3253%" y="37" width="0.1529%" height="15" fill="rgb(221,78,26)" fg:x="710205382861" fg:w="1662689379"/><text x="65.5753%" y="47.50"></text></g><g><title>std::thread::yield_now (338,833,483 samples, 0.03%)</title><rect x="65.4783%" y="181" width="0.0312%" height="15" fill="rgb(250,127,30)" fg:x="711868072240" fg:w="338833483"/><text x="65.7283%" y="191.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (178,520,069 samples, 0.02%)</title><rect x="65.4930%" y="165" width="0.0164%" height="15" fill="rgb(230,49,44)" fg:x="712028385654" fg:w="178520069"/><text x="65.7430%" y="175.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (297,589,852,153 samples, 27.37%)</title><rect x="38.1375%" y="277" width="27.3726%" height="15" fill="rgb(229,67,23)" fg:x="414623526304" fg:w="297589852153"/><text x="38.3875%" y="287.50">&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;..</text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (295,439,601,256 samples, 27.17%)</title><rect x="38.3352%" y="261" width="27.1748%" height="15" fill="rgb(249,83,47)" fg:x="416773777201" fg:w="295439601256"/><text x="38.5852%" y="271.50">lock_api::rwlock::RwLock&lt;R,T&gt;::write</text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (295,439,601,256 samples, 27.17%)</title><rect x="38.3352%" y="245" width="27.1748%" height="15" fill="rgb(215,43,3)" fg:x="416773777201" fg:w="295439601256"/><text x="38.5852%" y="255.50">&lt;dashmap::lock::RawRwLock as lock_api::rwloc..</text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (71,507,646,030 samples, 6.58%)</title><rect x="58.9327%" y="229" width="6.5773%" height="15" fill="rgb(238,154,13)" fg:x="640705732427" fg:w="71507646030"/><text x="59.1827%" y="239.50">dashmap::..</text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (46,961,656,404 samples, 4.32%)</title><rect x="61.1905%" y="213" width="4.3196%" height="15" fill="rgb(219,56,2)" fg:x="665251722053" fg:w="46961656404"/><text x="61.4405%" y="223.50">parki..</text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (22,878,193,690 samples, 2.10%)</title><rect x="63.4057%" y="197" width="2.1044%" height="15" fill="rgb(233,0,4)" fg:x="689335184767" fg:w="22878193690"/><text x="63.6557%" y="207.50">p..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::determine_shard (2,643,664,784 samples, 0.24%)</title><rect x="65.5103%" y="277" width="0.2432%" height="15" fill="rgb(235,30,7)" fg:x="712216576686" fg:w="2643664784"/><text x="65.7603%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,994,071,416 samples, 0.28%)</title><rect x="66.9725%" y="197" width="0.2754%" height="15" fill="rgb(250,79,13)" fg:x="728113177831" fg:w="2994071416"/><text x="67.2225%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,438,519,678 samples, 0.50%)</title><rect x="66.8504%" y="213" width="0.5002%" height="15" fill="rgb(211,146,34)" fg:x="726785515203" fg:w="5438519678"/><text x="67.1004%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,116,785,634 samples, 0.10%)</title><rect x="67.2479%" y="197" width="0.1027%" height="15" fill="rgb(228,22,38)" fg:x="731107249247" fg:w="1116785634"/><text x="67.4979%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14,666,407,753 samples, 1.35%)</title><rect x="68.3599%" y="197" width="1.3490%" height="15" fill="rgb(235,168,5)" fg:x="743196694847" fg:w="14666407753"/><text x="68.6099%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (50,350,527,175 samples, 4.63%)</title><rect x="65.7535%" y="261" width="4.6313%" height="15" fill="rgb(221,155,16)" fg:x="714860241470" fg:w="50350527175"/><text x="66.0035%" y="271.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (50,350,527,175 samples, 4.63%)</title><rect x="65.7535%" y="245" width="4.6313%" height="15" fill="rgb(215,215,53)" fg:x="714860241470" fg:w="50350527175"/><text x="66.0035%" y="255.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (50,350,527,175 samples, 4.63%)</title><rect x="65.7535%" y="229" width="4.6313%" height="15" fill="rgb(223,4,10)" fg:x="714860241470" fg:w="50350527175"/><text x="66.0035%" y="239.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (32,986,733,764 samples, 3.03%)</title><rect x="67.3506%" y="213" width="3.0342%" height="15" fill="rgb(234,103,6)" fg:x="732224034881" fg:w="32986733764"/><text x="67.6006%" y="223.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7,347,666,045 samples, 0.68%)</title><rect x="69.7089%" y="197" width="0.6758%" height="15" fill="rgb(227,97,0)" fg:x="757863102600" fg:w="7347666045"/><text x="69.9589%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,330,691,288 samples, 0.21%)</title><rect x="70.3848%" y="261" width="0.2144%" height="15" fill="rgb(234,150,53)" fg:x="765210768645" fg:w="2330691288"/><text x="70.6348%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,016,453,873 samples, 0.09%)</title><rect x="70.5057%" y="245" width="0.0935%" height="15" fill="rgb(228,201,54)" fg:x="766525006060" fg:w="1016453873"/><text x="70.7557%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,016,453,873 samples, 0.09%)</title><rect x="70.5057%" y="229" width="0.0935%" height="15" fill="rgb(222,22,37)" fg:x="766525006060" fg:w="1016453873"/><text x="70.7557%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,016,453,873 samples, 0.09%)</title><rect x="70.5057%" y="213" width="0.0935%" height="15" fill="rgb(237,53,32)" fg:x="766525006060" fg:w="1016453873"/><text x="70.7557%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,031,084,989 samples, 0.09%)</title><rect x="72.4388%" y="149" width="0.0948%" height="15" fill="rgb(233,25,53)" fg:x="787541556520" fg:w="1031084989"/><text x="72.6888%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,926,387,894 samples, 0.36%)</title><rect x="72.2101%" y="165" width="0.3612%" height="15" fill="rgb(210,40,34)" fg:x="785055015587" fg:w="3926387894"/><text x="72.4601%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (408,761,972 samples, 0.04%)</title><rect x="72.5336%" y="149" width="0.0376%" height="15" fill="rgb(241,220,44)" fg:x="788572641509" fg:w="408761972"/><text x="72.7836%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,551,586,722 samples, 0.51%)</title><rect x="74.2434%" y="149" width="0.5106%" height="15" fill="rgb(235,28,35)" fg:x="807161190402" fg:w="5551586722"/><text x="74.4934%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (23,928,841,213 samples, 2.20%)</title><rect x="72.5715%" y="165" width="2.2010%" height="15" fill="rgb(210,56,17)" fg:x="788984769806" fg:w="23928841213"/><text x="72.8215%" y="175.50">c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (200,833,895 samples, 0.02%)</title><rect x="74.7541%" y="149" width="0.0185%" height="15" fill="rgb(224,130,29)" fg:x="812712777124" fg:w="200833895"/><text x="75.0041%" y="159.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb1a3d5e21bd11786E.llvm.14294288901785536018 (44,409,442,196 samples, 4.08%)</title><rect x="70.7096%" y="181" width="4.0848%" height="15" fill="rgb(235,212,8)" fg:x="768741860166" fg:w="44409442196"/><text x="70.9596%" y="191.50">_ZN7..</text></g><g><title>core::intrinsics::copy_nonoverlapping (237,691,343 samples, 0.02%)</title><rect x="74.7725%" y="165" width="0.0219%" height="15" fill="rgb(223,33,50)" fg:x="812913611019" fg:w="237691343"/><text x="75.0225%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (380,675,407 samples, 0.04%)</title><rect x="76.2900%" y="133" width="0.0350%" height="15" fill="rgb(219,149,13)" fg:x="829410758456" fg:w="380675407"/><text x="76.5400%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,578,796,628 samples, 0.15%)</title><rect x="76.2150%" y="149" width="0.1452%" height="15" fill="rgb(250,156,29)" fg:x="828596085548" fg:w="1578796628"/><text x="76.4650%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (383,448,313 samples, 0.04%)</title><rect x="76.3250%" y="133" width="0.0353%" height="15" fill="rgb(216,193,19)" fg:x="829791433863" fg:w="383448313"/><text x="76.5750%" y="143.50"></text></g><g><title>core::cmp::min (329,314,545 samples, 0.03%)</title><rect x="76.3602%" y="149" width="0.0303%" height="15" fill="rgb(216,135,14)" fg:x="830174882176" fg:w="329314545"/><text x="76.6102%" y="159.50"></text></g><g><title>core::cmp::Ord::min (329,314,545 samples, 0.03%)</title><rect x="76.3602%" y="133" width="0.0303%" height="15" fill="rgb(241,47,5)" fg:x="830174882176" fg:w="329314545"/><text x="76.6102%" y="143.50"></text></g><g><title>core::cmp::min_by (329,314,545 samples, 0.03%)</title><rect x="76.3602%" y="117" width="0.0303%" height="15" fill="rgb(233,42,35)" fg:x="830174882176" fg:w="329314545"/><text x="76.6102%" y="127.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hb1a3d5e21bd11786E.llvm.14294288901785536018 (23,052,533,042 samples, 2.12%)</title><rect x="74.9852%" y="165" width="2.1204%" height="15" fill="rgb(231,13,6)" fg:x="815225457001" fg:w="23052533042"/><text x="75.2352%" y="175.50">_..</text></g><g><title>core::hash::sip::u8to64_le (7,773,793,322 samples, 0.72%)</title><rect x="76.3905%" y="149" width="0.7150%" height="15" fill="rgb(207,181,40)" fg:x="830504196721" fg:w="7773793322"/><text x="76.6405%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (25,333,354,929 samples, 2.33%)</title><rect x="74.7944%" y="181" width="2.3302%" height="15" fill="rgb(254,173,49)" fg:x="813151302362" fg:w="25333354929"/><text x="75.0444%" y="191.50">c..</text></g><g><title>dashmap::lock::RawRwLock::lock_exclusive_slow (206,667,248 samples, 0.02%)</title><rect x="77.1056%" y="165" width="0.0190%" height="15" fill="rgb(221,1,38)" fg:x="838277990043" fg:w="206667248"/><text x="77.3556%" y="175.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (206,667,248 samples, 0.02%)</title><rect x="77.1056%" y="149" width="0.0190%" height="15" fill="rgb(206,124,46)" fg:x="838277990043" fg:w="206667248"/><text x="77.3556%" y="159.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (206,667,248 samples, 0.02%)</title><rect x="77.1056%" y="133" width="0.0190%" height="15" fill="rgb(249,21,11)" fg:x="838277990043" fg:w="206667248"/><text x="77.3556%" y="143.50"></text></g><g><title>__sched_yield (206,667,248 samples, 0.02%)</title><rect x="77.1056%" y="117" width="0.0190%" height="15" fill="rgb(222,201,40)" fg:x="838277990043" fg:w="206667248"/><text x="77.3556%" y="127.50"></text></g><g><title>[unknown] (206,667,248 samples, 0.02%)</title><rect x="77.1056%" y="101" width="0.0190%" height="15" fill="rgb(235,61,29)" fg:x="838277990043" fg:w="206667248"/><text x="77.3556%" y="111.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_u64 (123,641,181,812 samples, 11.37%)</title><rect x="65.7535%" y="277" width="11.3726%" height="15" fill="rgb(219,207,3)" fg:x="714860241470" fg:w="123641181812"/><text x="66.0035%" y="287.50">dashmap::DashMap&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (70,959,963,349 samples, 6.53%)</title><rect x="70.5992%" y="261" width="6.5270%" height="15" fill="rgb(222,56,46)" fg:x="767541459933" fg:w="70959963349"/><text x="70.8492%" y="271.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (70,959,963,349 samples, 6.53%)</title><rect x="70.5992%" y="245" width="6.5270%" height="15" fill="rgb(239,76,54)" fg:x="767541459933" fg:w="70959963349"/><text x="70.8492%" y="255.50">core::has..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (70,959,963,349 samples, 6.53%)</title><rect x="70.5992%" y="229" width="6.5270%" height="15" fill="rgb(231,124,27)" fg:x="767541459933" fg:w="70959963349"/><text x="70.8492%" y="239.50">&lt;std::has..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (70,959,963,349 samples, 6.53%)</title><rect x="70.5992%" y="213" width="6.5270%" height="15" fill="rgb(249,195,6)" fg:x="767541459933" fg:w="70959963349"/><text x="70.8492%" y="223.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (70,959,963,349 samples, 6.53%)</title><rect x="70.5992%" y="197" width="6.5270%" height="15" fill="rgb(237,174,47)" fg:x="767541459933" fg:w="70959963349"/><text x="70.8492%" y="207.50">&lt;core::ha..</text></g><g><title>dashmap::util::SharedValue&lt;T&gt;::as_ptr (260,789,998 samples, 0.02%)</title><rect x="77.1261%" y="277" width="0.0240%" height="15" fill="rgb(206,201,31)" fg:x="838501423282" fg:w="260789998"/><text x="77.3761%" y="287.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (260,789,998 samples, 0.02%)</title><rect x="77.1261%" y="261" width="0.0240%" height="15" fill="rgb(231,57,52)" fg:x="838501423282" fg:w="260789998"/><text x="77.3761%" y="271.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (209,875,928 samples, 0.02%)</title><rect x="77.1501%" y="277" width="0.0193%" height="15" fill="rgb(248,177,22)" fg:x="838762213280" fg:w="209875928"/><text x="77.4001%" y="287.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (209,875,928 samples, 0.02%)</title><rect x="77.1501%" y="261" width="0.0193%" height="15" fill="rgb(215,211,37)" fg:x="838762213280" fg:w="209875928"/><text x="77.4001%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (209,875,928 samples, 0.02%)</title><rect x="77.1501%" y="245" width="0.0193%" height="15" fill="rgb(241,128,51)" fg:x="838762213280" fg:w="209875928"/><text x="77.4001%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,158,503,363 samples, 0.20%)</title><rect x="77.2964%" y="245" width="0.1985%" height="15" fill="rgb(227,165,31)" fg:x="840352558898" fg:w="2158503363"/><text x="77.5464%" y="255.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2,139,248,963 samples, 0.20%)</title><rect x="77.2982%" y="229" width="0.1968%" height="15" fill="rgb(228,167,24)" fg:x="840371813298" fg:w="2139248963"/><text x="77.5482%" y="239.50"></text></g><g><title>__memcmp_avx2_movbe (26,508,309,119 samples, 2.44%)</title><rect x="92.1400%" y="133" width="2.4383%" height="15" fill="rgb(228,143,12)" fg:x="1001729418790" fg:w="26508309119"/><text x="92.3900%" y="143.50">__..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut::_{{closure}} (180,594,562,226 samples, 16.61%)</title><rect x="77.9751%" y="229" width="16.6113%" height="15" fill="rgb(249,149,8)" fg:x="847730923079" fg:w="180594562226"/><text x="78.2251%" y="239.50">&lt;dashmap::DashMap&lt;K,V,S&gt; a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (180,594,562,226 samples, 16.61%)</title><rect x="77.9751%" y="213" width="16.6113%" height="15" fill="rgb(243,35,44)" fg:x="847730923079" fg:w="180594562226"/><text x="78.2251%" y="223.50">core::cmp::impls::&lt;impl co..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (180,594,562,226 samples, 16.61%)</title><rect x="77.9751%" y="197" width="16.6113%" height="15" fill="rgb(246,89,9)" fg:x="847730923079" fg:w="180594562226"/><text x="78.2251%" y="207.50">core::str::traits::&lt;impl c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (180,594,562,226 samples, 16.61%)</title><rect x="77.9751%" y="181" width="16.6113%" height="15" fill="rgb(233,213,13)" fg:x="847730923079" fg:w="180594562226"/><text x="78.2251%" y="191.50">core::cmp::impls::&lt;impl co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (180,594,562,226 samples, 16.61%)</title><rect x="77.9751%" y="165" width="16.6113%" height="15" fill="rgb(233,141,41)" fg:x="847730923079" fg:w="180594562226"/><text x="78.2251%" y="175.50">core::slice::cmp::&lt;impl co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (180,594,562,226 samples, 16.61%)</title><rect x="77.9751%" y="149" width="16.6113%" height="15" fill="rgb(239,167,4)" fg:x="847730923079" fg:w="180594562226"/><text x="78.2251%" y="159.50">&lt;[A] as core::slice::cmp::..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (187,205,493,537 samples, 17.22%)</title><rect x="77.4949%" y="245" width="17.2193%" height="15" fill="rgb(209,217,16)" fg:x="842511062261" fg:w="187205493537"/><text x="77.7449%" y="255.50">hashbrown::raw::inner::RawT..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (1,391,070,493 samples, 0.13%)</title><rect x="94.5863%" y="229" width="0.1280%" height="15" fill="rgb(219,88,35)" fg:x="1028325485305" fg:w="1391070493"/><text x="94.8363%" y="239.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (1,391,070,493 samples, 0.13%)</title><rect x="94.5863%" y="213" width="0.1280%" height="15" fill="rgb(220,193,23)" fg:x="1028325485305" fg:w="1391070493"/><text x="94.8363%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,391,070,493 samples, 0.13%)</title><rect x="94.5863%" y="197" width="0.1280%" height="15" fill="rgb(230,90,52)" fg:x="1028325485305" fg:w="1391070493"/><text x="94.8363%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (803,819,765 samples, 0.07%)</title><rect x="94.7143%" y="245" width="0.0739%" height="15" fill="rgb(252,106,19)" fg:x="1029716555798" fg:w="803819765"/><text x="94.9643%" y="255.50"></text></g><g><title>hashbrown::raw::inner::h2 (10,874,338,985 samples, 1.00%)</title><rect x="94.7882%" y="245" width="1.0002%" height="15" fill="rgb(206,74,20)" fg:x="1030520375563" fg:w="10874338985"/><text x="95.0382%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (44,304,629,375 samples, 4.08%)</title><rect x="95.7884%" y="245" width="4.0752%" height="15" fill="rgb(230,138,44)" fg:x="1041394714548" fg:w="44304629375"/><text x="96.0384%" y="255.50">hash..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (44,304,629,375 samples, 4.08%)</title><rect x="95.7884%" y="229" width="4.0752%" height="15" fill="rgb(235,182,43)" fg:x="1041394714548" fg:w="44304629375"/><text x="96.0384%" y="239.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (44,304,629,375 samples, 4.08%)</title><rect x="95.7884%" y="213" width="4.0752%" height="15" fill="rgb(242,16,51)" fg:x="1041394714548" fg:w="44304629375"/><text x="96.0384%" y="223.50">core..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (679,894,646,458 samples, 62.54%)</title><rect x="37.4355%" y="293" width="62.5373%" height="15" fill="rgb(248,9,4)" fg:x="406992210434" fg:w="679894646458"/><text x="37.6855%" y="303.50">&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (247,914,767,684 samples, 22.80%)</title><rect x="77.1694%" y="277" width="22.8034%" height="15" fill="rgb(210,31,22)" fg:x="838972089208" fg:w="247914767684"/><text x="77.4194%" y="287.50">hashbrown::raw::inner::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (247,914,767,684 samples, 22.80%)</title><rect x="77.1694%" y="261" width="22.8034%" height="15" fill="rgb(239,54,39)" fg:x="838972089208" fg:w="247914767684"/><text x="77.4194%" y="271.50">hashbrown::raw::inner::RawTableInner..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1,187,512,969 samples, 0.11%)</title><rect x="99.8636%" y="245" width="0.1092%" height="15" fill="rgb(230,99,41)" fg:x="1085699343923" fg:w="1187512969"/><text x="100.1136%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,187,512,969 samples, 0.11%)</title><rect x="99.8636%" y="229" width="0.1092%" height="15" fill="rgb(253,106,12)" fg:x="1085699343923" fg:w="1187512969"/><text x="100.1136%" y="239.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get_mut (680,017,878,135 samples, 62.55%)</title><rect x="37.4251%" y="309" width="62.5487%" height="15" fill="rgb(213,46,41)" fg:x="406878890601" fg:w="680017878135"/><text x="37.6751%" y="319.50">dashmap::DashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hovinen::process_buffer (1,085,598,452,326 samples, 99.85%)</title><rect x="0.1195%" y="341" width="99.8543%" height="15" fill="rgb(215,133,35)" fg:x="1298936115" fg:w="1085598452326"/><text x="0.3695%" y="351.50">hovinen::process_buffer</text></g><g><title>hovinen::process_line (1,029,574,538,085 samples, 94.70%)</title><rect x="5.2726%" y="325" width="94.7012%" height="15" fill="rgb(213,28,5)" fg:x="57322850356" fg:w="1029574538085"/><text x="5.5226%" y="335.50">hovinen::process_line</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,085,660,695,529 samples, 99.86%)</title><rect x="0.1179%" y="389" width="99.8601%" height="15" fill="rgb(215,77,49)" fg:x="1282314753" fg:w="1085660695529"/><text x="0.3679%" y="399.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1,085,660,695,529 samples, 99.86%)</title><rect x="0.1179%" y="373" width="99.8601%" height="15" fill="rgb(248,100,22)" fg:x="1282314753" fg:w="1085660695529"/><text x="0.3679%" y="383.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>_ZN7hovinen14processing_job28_$u7b$$u7b$closure$u7d$$u7d$17h0e53b788db096cb2E.llvm.8071473915536265383 (1,085,660,695,529 samples, 99.86%)</title><rect x="0.1179%" y="357" width="99.8601%" height="15" fill="rgb(208,67,9)" fg:x="1282314753" fg:w="1085660695529"/><text x="0.3679%" y="367.50">_ZN7hovinen14processing_job28_$u7b$$u7b$closure$u7d$$u7d$17h0e53b788db096cb2E.llvm.8071473915536265383</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,085,674,589,237 samples, 99.86%)</title><rect x="0.1179%" y="405" width="99.8613%" height="15" fill="rgb(219,133,21)" fg:x="1282314753" fg:w="1085674589237"/><text x="0.3679%" y="415.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::coop::budget (1,085,728,033,380 samples, 99.87%)</title><rect x="0.1137%" y="613" width="99.8663%" height="15" fill="rgb(246,46,29)" fg:x="1235871696" fg:w="1085728033380"/><text x="0.3637%" y="623.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (1,085,728,033,380 samples, 99.87%)</title><rect x="0.1137%" y="597" width="99.8663%" height="15" fill="rgb(246,185,52)" fg:x="1235871696" fg:w="1085728033380"/><text x="0.3637%" y="607.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (1,085,728,033,380 samples, 99.87%)</title><rect x="0.1137%" y="581" width="99.8663%" height="15" fill="rgb(252,136,11)" fg:x="1235871696" fg:w="1085728033380"/><text x="0.3637%" y="591.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1,085,718,101,923 samples, 99.87%)</title><rect x="0.1146%" y="565" width="99.8653%" height="15" fill="rgb(219,138,53)" fg:x="1245803153" fg:w="1085718101923"/><text x="0.3646%" y="575.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,085,718,101,923 samples, 99.87%)</title><rect x="0.1146%" y="549" width="99.8653%" height="15" fill="rgb(211,51,23)" fg:x="1245803153" fg:w="1085718101923"/><text x="0.3646%" y="559.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,085,718,101,923 samples, 99.87%)</title><rect x="0.1146%" y="533" width="99.8653%" height="15" fill="rgb(247,221,28)" fg:x="1245803153" fg:w="1085718101923"/><text x="0.3646%" y="543.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,085,685,015,157 samples, 99.86%)</title><rect x="0.1176%" y="517" width="99.8623%" height="15" fill="rgb(251,222,45)" fg:x="1278889919" fg:w="1085685015157"/><text x="0.3676%" y="527.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (1,085,685,015,157 samples, 99.86%)</title><rect x="0.1176%" y="501" width="99.8623%" height="15" fill="rgb(217,162,53)" fg:x="1278889919" fg:w="1085685015157"/><text x="0.3676%" y="511.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (1,085,681,590,323 samples, 99.86%)</title><rect x="0.1179%" y="485" width="99.8620%" height="15" fill="rgb(229,93,14)" fg:x="1282314753" fg:w="1085681590323"/><text x="0.3679%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,085,681,590,323 samples, 99.86%)</title><rect x="0.1179%" y="469" width="99.8620%" height="15" fill="rgb(209,67,49)" fg:x="1282314753" fg:w="1085681590323"/><text x="0.3679%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,085,681,590,323 samples, 99.86%)</title><rect x="0.1179%" y="453" width="99.8620%" height="15" fill="rgb(213,87,29)" fg:x="1282314753" fg:w="1085681590323"/><text x="0.3679%" y="463.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,085,681,590,323 samples, 99.86%)</title><rect x="0.1179%" y="437" width="99.8620%" height="15" fill="rgb(205,151,52)" fg:x="1282314753" fg:w="1085681590323"/><text x="0.3679%" y="447.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (1,085,681,590,323 samples, 99.86%)</title><rect x="0.1179%" y="421" width="99.8620%" height="15" fill="rgb(253,215,39)" fg:x="1282314753" fg:w="1085681590323"/><text x="0.3679%" y="431.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1,085,728,084,304 samples, 99.87%)</title><rect x="0.1137%" y="629" width="99.8663%" height="15" fill="rgb(221,220,41)" fg:x="1235871696" fg:w="1085728084304"/><text x="0.3637%" y="639.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>__GI___clone3 (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1285" width="99.8682%" height="15" fill="rgb(218,133,21)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1295.50">__GI___clone3</text></g><g><title>start_thread (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1269" width="99.8682%" height="15" fill="rgb(221,193,43)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1279.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1253" width="99.8682%" height="15" fill="rgb(240,128,52)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1263.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1237" width="99.8682%" height="15" fill="rgb(253,114,12)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1247.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1221" width="99.8682%" height="15" fill="rgb(215,223,47)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1231.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1205" width="99.8682%" height="15" fill="rgb(248,225,23)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1215.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1189" width="99.8682%" height="15" fill="rgb(250,108,0)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1199.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1173" width="99.8682%" height="15" fill="rgb(228,208,7)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1183.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1157" width="99.8682%" height="15" fill="rgb(244,45,10)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1167.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1141" width="99.8682%" height="15" fill="rgb(207,125,25)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1151.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1125" width="99.8682%" height="15" fill="rgb(210,195,18)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1135.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1109" width="99.8682%" height="15" fill="rgb(249,80,12)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1119.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1093" width="99.8682%" height="15" fill="rgb(221,65,9)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1103.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1077" width="99.8682%" height="15" fill="rgb(235,49,36)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1087.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1,085,748,896,045 samples, 99.87%)</title><rect x="0.1125%" y="1061" width="99.8682%" height="15" fill="rgb(225,32,20)" fg:x="1222719704" fg:w="1085748896045"/><text x="0.3625%" y="1071.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (1,085,748,895,736 samples, 99.87%)</title><rect x="0.1125%" y="1045" width="99.8682%" height="15" fill="rgb(215,141,46)" fg:x="1222720013" fg:w="1085748895736"/><text x="0.3625%" y="1055.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1,085,748,895,736 samples, 99.87%)</title><rect x="0.1125%" y="1029" width="99.8682%" height="15" fill="rgb(250,160,47)" fg:x="1222720013" fg:w="1085748895736"/><text x="0.3625%" y="1039.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,085,748,895,736 samples, 99.87%)</title><rect x="0.1125%" y="1013" width="99.8682%" height="15" fill="rgb(216,222,40)" fg:x="1222720013" fg:w="1085748895736"/><text x="0.3625%" y="1023.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,085,748,895,736 samples, 99.87%)</title><rect x="0.1125%" y="997" width="99.8682%" height="15" fill="rgb(234,217,39)" fg:x="1222720013" fg:w="1085748895736"/><text x="0.3625%" y="1007.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,085,748,895,736 samples, 99.87%)</title><rect x="0.1125%" y="981" width="99.8682%" height="15" fill="rgb(207,178,40)" fg:x="1222720013" fg:w="1085748895736"/><text x="0.3625%" y="991.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="965" width="99.8682%" height="15" fill="rgb(221,136,13)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="975.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="949" width="99.8682%" height="15" fill="rgb(249,199,10)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="933" width="99.8682%" height="15" fill="rgb(249,222,13)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="917" width="99.8682%" height="15" fill="rgb(244,185,38)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="927.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="901" width="99.8682%" height="15" fill="rgb(236,202,9)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="911.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="885" width="99.8682%" height="15" fill="rgb(250,229,37)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="895.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="869" width="99.8682%" height="15" fill="rgb(206,174,23)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="879.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="853" width="99.8682%" height="15" fill="rgb(211,33,43)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="863.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="837" width="99.8682%" height="15" fill="rgb(245,58,50)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="847.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="821" width="99.8682%" height="15" fill="rgb(244,68,36)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="831.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="805" width="99.8682%" height="15" fill="rgb(232,229,15)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="815.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1,085,748,890,715 samples, 99.87%)</title><rect x="0.1125%" y="789" width="99.8682%" height="15" fill="rgb(254,30,23)" fg:x="1222725034" fg:w="1085748890715"/><text x="0.3625%" y="799.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,085,748,890,714 samples, 99.87%)</title><rect x="0.1125%" y="773" width="99.8682%" height="15" fill="rgb(235,160,14)" fg:x="1222725035" fg:w="1085748890714"/><text x="0.3625%" y="783.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="757" width="99.8682%" height="15" fill="rgb(212,155,44)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="767.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="741" width="99.8682%" height="15" fill="rgb(226,2,50)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="751.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="725" width="99.8682%" height="15" fill="rgb(234,177,6)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="735.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="709" width="99.8682%" height="15" fill="rgb(217,24,9)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="719.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="693" width="99.8682%" height="15" fill="rgb(220,13,46)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="703.50">tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="677" width="99.8682%" height="15" fill="rgb(239,221,27)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="687.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="661" width="99.8682%" height="15" fill="rgb(222,198,25)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="671.50">tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1,085,748,885,112 samples, 99.87%)</title><rect x="0.1125%" y="645" width="99.8682%" height="15" fill="rgb(211,99,13)" fg:x="1222730637" fg:w="1085748885112"/><text x="0.3625%" y="655.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (175,047,439 samples, 0.02%)</title><rect x="99.9810%" y="1285" width="0.0161%" height="15" fill="rgb(232,111,31)" fg:x="1086975048002" fg:w="175047439"/><text x="100.2310%" y="1295.50"></text></g><g><title>core::num::dec2flt::dec2flt (175,047,439 samples, 0.02%)</title><rect x="99.9810%" y="1269" width="0.0161%" height="15" fill="rgb(245,82,37)" fg:x="1086975048002" fg:w="175047439"/><text x="100.2310%" y="1279.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (175,047,439 samples, 0.02%)</title><rect x="99.9810%" y="1253" width="0.0161%" height="15" fill="rgb(227,149,46)" fg:x="1086975048002" fg:w="175047439"/><text x="100.2310%" y="1263.50"></text></g><g><title>all (1,087,182,034,937 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="1087182034937"/><text x="0.2500%" y="1327.50"></text></g><g><title>tokio-runtime-w (1,086,610,814,437 samples, 99.95%)</title><rect x="0.0525%" y="1301" width="99.9475%" height="15" fill="rgb(226,80,48)" fg:x="571220500" fg:w="1086610814437"/><text x="0.3025%" y="1311.50">tokio-runtime-w</text></g></svg></svg>
